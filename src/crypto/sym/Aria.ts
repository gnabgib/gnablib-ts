/*! Copyright 2025 the gnablib contributors MPL-1.1 */

import { U128, U128Mut } from '../../primitive/number/U128.js';
import { sLen } from '../../safe/safe.js';
import { IBlockCrypt } from '../interfaces/IBlockCrypt.js';

const blockSize = 16;

// prettier-ignore
const sb:Uint8Array[]=[
    //sb1 - AES.sBox
    Uint8Array.of(
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
    ),
    //sb2
    Uint8Array.of(
        0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
        0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
        0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
        0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
        0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
        0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
        0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
        0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
        0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
        0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
        0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
        0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
        0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
        0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
        0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
        0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81,
    ),
    //sb3 AES.invSBox
    Uint8Array.of(
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
    ),
    //sb4
    Uint8Array.of(
        0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
        0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
        0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
        0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
        0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
        0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
        0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
        0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
        0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
        0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
        0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
        0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
        0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
        0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
        0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
        0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60,
    )
];

// https://www.rfc-editor.org/rfc/rfc5794 2.4.3 (diffusion layer)
const tmp_diff = new Uint8Array(16);
/** diffusion layer - updates d */
function a(d: Uint8Array) {
	tmp_diff[0] = d[3] ^ d[4] ^ d[6] ^ d[8] ^ d[9] ^ d[13] ^ d[14];
	tmp_diff[1] = d[2] ^ d[5] ^ d[7] ^ d[8] ^ d[9] ^ d[12] ^ d[15];
	tmp_diff[2] = d[1] ^ d[4] ^ d[6] ^ d[10] ^ d[11] ^ d[12] ^ d[15];
	tmp_diff[3] = d[0] ^ d[5] ^ d[7] ^ d[10] ^ d[11] ^ d[13] ^ d[14];
	tmp_diff[4] = d[0] ^ d[2] ^ d[5] ^ d[8] ^ d[11] ^ d[14] ^ d[15];
	tmp_diff[5] = d[1] ^ d[3] ^ d[4] ^ d[9] ^ d[10] ^ d[14] ^ d[15];
	tmp_diff[6] = d[0] ^ d[2] ^ d[7] ^ d[9] ^ d[10] ^ d[12] ^ d[13];
	tmp_diff[7] = d[1] ^ d[3] ^ d[6] ^ d[8] ^ d[11] ^ d[12] ^ d[13];
	tmp_diff[8] = d[0] ^ d[1] ^ d[4] ^ d[7] ^ d[10] ^ d[13] ^ d[15];
	tmp_diff[9] = d[0] ^ d[1] ^ d[5] ^ d[6] ^ d[11] ^ d[12] ^ d[14];
	tmp_diff[10] = d[2] ^ d[3] ^ d[5] ^ d[6] ^ d[8] ^ d[13] ^ d[15];
	tmp_diff[11] = d[2] ^ d[3] ^ d[4] ^ d[7] ^ d[9] ^ d[12] ^ d[14];
	tmp_diff[12] = d[1] ^ d[2] ^ d[6] ^ d[7] ^ d[9] ^ d[11] ^ d[12];
	tmp_diff[13] = d[0] ^ d[3] ^ d[6] ^ d[7] ^ d[8] ^ d[10] ^ d[13];
	tmp_diff[14] = d[0] ^ d[3] ^ d[4] ^ d[5] ^ d[9] ^ d[11] ^ d[14];
	tmp_diff[15] = d[1] ^ d[2] ^ d[4] ^ d[5] ^ d[8] ^ d[10] ^ d[15];
	d.set(tmp_diff);
}

//https://www.rfc-editor.org/rfc/rfc5794 2.4.2 (Substitution Layers) - updates d
/** Substitution layer - updates d */
function sl1(d: Uint8Array) {
	d[0] = sb[0][d[0]];
	d[1] = sb[1][d[1]];
	d[2] = sb[2][d[2]];
	d[3] = sb[3][d[3]];
	d[4] = sb[0][d[4]];
	d[5] = sb[1][d[5]];
	d[6] = sb[2][d[6]];
	d[7] = sb[3][d[7]];
	d[8] = sb[0][d[8]];
	d[9] = sb[1][d[9]];
	d[10] = sb[2][d[10]];
	d[11] = sb[3][d[11]];
	d[12] = sb[0][d[12]];
	d[13] = sb[1][d[13]];
	d[14] = sb[2][d[14]];
	d[15] = sb[3][d[15]];
}
/** Substitution layer - updates d */
function sl2(d: Uint8Array) {
	d[0] = sb[2][d[0]];
	d[1] = sb[3][d[1]];
	d[2] = sb[0][d[2]];
	d[3] = sb[1][d[3]];
	d[4] = sb[2][d[4]];
	d[5] = sb[3][d[5]];
	d[6] = sb[0][d[6]];
	d[7] = sb[1][d[7]];
	d[8] = sb[2][d[8]];
	d[9] = sb[3][d[9]];
	d[10] = sb[0][d[10]];
	d[11] = sb[1][d[11]];
	d[12] = sb[2][d[12]];
	d[13] = sb[3][d[13]];
	d[14] = sb[0][d[14]];
	d[15] = sb[1][d[15]];
}

//https://www.rfc-editor.org/rfc/rfc5794 2.4.1 (Round Functions) - updates d
/** Round function - updates d */
function fo(d: Uint8Array, rk: Uint8Array) {
	for (let i = 0; i < 16; i++) d[i] ^= rk[i];
	sl1(d);
	a(d);
}
/** Round function - updates d */
function fe(d: Uint8Array, rk: Uint8Array) {
	for (let i = 0; i < 16; i++) d[i] ^= rk[i];
	sl2(d);
	a(d);
}

// prettier-ignore
const c1=Uint8Array.of(0x51,0x7c,0xc1,0xb7,0x27,0x22,0x0a,0x94,0xfe,0x13,0xab,0xe8,0xfa,0x9a,0x6e,0xe0);
// prettier-ignore
const c2=Uint8Array.of(0x6d,0xb1,0x4a,0xcc,0x9e,0x21,0xc8,0x20,0xff,0x28,0xb1,0xd5,0xef,0x5d,0xe2,0xb0);
// prettier-ignore
const c3=Uint8Array.of(0xdb,0x92,0x37,0x1d,0x21,0x26,0xe9,0x70,0x03,0x24,0x97,0x75,0x04,0xe8,0xc9,0x0e);

abstract class AAria {
	/** Block size in bytes */
	readonly blockSize = blockSize; //128bit
	/** Number of rounds */
	readonly rounds: number;
	readonly #ek: Uint8Array;
	readonly #dk: Uint8Array;

	constructor(
		rounds: number,
		key: Uint8Array,
		ck1: Uint8Array,
		ck2: Uint8Array,
		ck3: Uint8Array
	) {
		const w0 = U128.fromBytesBE(key);

		const w1_b = key.slice(0, 16);
		fo(w1_b, ck1);
		for (let i = 0; i < 16; i++) w1_b[i] ^= key[i + 16];
		const w1 = U128.fromBytesBE(w1_b);

		const w2_b = w1.toBytesBE();
		fe(w2_b, ck2);
		const w2 = U128Mut.fromBytesBE(w2_b).xorEq(w0);

		const w3_b = w2.toBytesBE();
		fo(w3_b, ck3);
		const w3 = U128Mut.fromBytesBE(w3_b).xorEq(w1);

		const ek = new Uint8Array(272); //16*17);
		ek.set(w0.mut().xorEq(w1.rRot(19)).toBytesBE(), 0);
		ek.set(w1.mut().xorEq(w2.rRot(19)).toBytesBE(), 1 * 16);
		ek.set(w2.mut().xorEq(w3.rRot(19)).toBytesBE(), 2 * 16);
		ek.set(w3.mut().xorEq(w0.rRot(19)).toBytesBE(), 3 * 16);

		ek.set(w0.mut().xorEq(w1.rRot(31)).toBytesBE(), 4 * 16);
		ek.set(w1.mut().xorEq(w2.rRot(31)).toBytesBE(), 5 * 16);
		ek.set(w2.mut().xorEq(w3.rRot(31)).toBytesBE(), 6 * 16);
		ek.set(w3.mut().xorEq(w0.rRot(31)).toBytesBE(), 7 * 16);

		ek.set(w0.mut().xorEq(w1.lRot(61)).toBytesBE(), 8 * 16);
		ek.set(w1.mut().xorEq(w2.lRot(61)).toBytesBE(), 9 * 16);
		ek.set(w2.mut().xorEq(w3.lRot(61)).toBytesBE(), 10 * 16);
		ek.set(w3.mut().xorEq(w0.lRot(61)).toBytesBE(), 11 * 16);

		ek.set(w0.mut().xorEq(w1.lRot(31)).toBytesBE(), 12 * 16);
		ek.set(w1.mut().xorEq(w2.lRot(31)).toBytesBE(), 13 * 16);
		ek.set(w2.mut().xorEq(w3.lRot(31)).toBytesBE(), 14 * 16);
		ek.set(w3.mut().xorEq(w0.lRot(31)).toBytesBE(), 15 * 16);

		ek.set(w0.mut().xorEq(w1.lRot(19)).toBytesBE(), 256);

		const dk = new Uint8Array(272); //16*17);
		dk.set(ek.subarray(rounds * 16, (rounds + 1) * 16));
		for (let i = rounds - 1; i > 0; i--) {
			dk.set(ek.subarray(i * 16, (i + 1) * 16), (rounds - i) * 16);
			a(dk.subarray((rounds - i) * 16));
		}
		dk.set(ek.subarray(0, 16), rounds * 16);
		this.rounds = rounds;
		this.#ek = ek;
		this.#dk = dk;
	}

	private _encBlock(data: Uint8Array) {
		let r = 0;
		const n = this.rounds - 2;
		do {
			fo(data, this.#ek.subarray(16 * r++));
			fe(data, this.#ek.subarray(16 * r++));
		} while (r < n);
		fo(data, this.#ek.subarray(16 * r++));

		for (let i = 0; i < 16; i++) data[i] ^= this.#ek[r * 16 + i];
		sl2(data);
		r++;
		for (let i = 0; i < 16; i++) data[i] ^= this.#ek[r * 16 + i];
	}

	private _decBlock(data: Uint8Array) {
		let r = 0;
		const n = this.rounds - 2;
		do {
			fo(data, this.#dk.subarray(16 * r++));
			fe(data, this.#dk.subarray(16 * r++));
		} while (r < n);
		fo(data, this.#dk.subarray(16 * r++));
		for (let i = 0; i < 16; i++) data[i] ^= this.#dk[r * 16 + i];
		sl2(data);
		r++;
		for (let i = 0; i < 16; i++) data[i] ^= this.#dk[r * 16 + i];
	}

	/**
	 * {@inheritDoc interfaces.IBlockCrypt#decryptBlock}
	 *
	 * @throws {@link error.NotEnoughSpaceError}
	 * If there's not enough bytes in `block` (`offset+1`*`blockSize`)
	 */
	decryptBlock(block: Uint8Array, offset = 0): void {
		const byteStart = offset * blockSize;
		sLen('block', block)
			.atLeast(byteStart + blockSize)
			.throwNot();
		this._decBlock(block.subarray(byteStart, byteStart + blockSize));
	}

	/**
	 * {@inheritDoc interfaces.IBlockCrypt#encryptBlock}
	 *
	 * @throws {@link error.NotEnoughSpaceError}
	 * If there's not enough bytes in `block` (`offset+1`*`blockSize`)
	 */
	encryptBlock(block: Uint8Array, offset = 0): void {
		const byteStart = offset * blockSize;
		sLen('block', block)
			.atLeast(byteStart + blockSize)
			.throwNot();
		this._encBlock(block.subarray(byteStart, byteStart + blockSize));
	}
}

/**
 * [ARIA](http://210.104.33.10/ARIA/index-e.html)
 * ([Wiki](https://en.wikipedia.org/wiki/ARIA_(cipher)))
 * 
 * ARIA is a general-purpose involutional SPN block cipher algorithm, 
 * optimized for lightweight environments and hardware implementation.
 *
 * First published: *2003*
 * Block size: *16 bytes*
 * Key size: *16 bytes*
 * Nonce size: *0 bytes*
 * Rounds: *12*
 *
 * Specified in:
 * - [ARIA Spec v1.0](http://210.104.33.10/ARIA/doc/ARIA-specification-e.pdf)
 * - [RFC5794](https://www.rfc-editor.org/rfc/rfc5794)
 */
export class Aria128 extends AAria implements IBlockCrypt {
	constructor(key: Uint8Array) {
		super(12, key, c1, c2, c3);
	}
}

/**
 * [ARIA](http://210.104.33.10/ARIA/index-e.html)
 * ([Wiki](https://en.wikipedia.org/wiki/ARIA_(cipher)))
 *
 * ARIA is a general-purpose involutional SPN block cipher algorithm, 
 * optimized for lightweight environments and hardware implementation.
 * 
 * First published: *2003*
 * Block size: *16 bytes*
 * Key size: *24 bytes*
 * Nonce size: *0 bytes*
 * Rounds: *14*
 *
 * Specified in:
 * - [ARIA Spec v1.0](http://210.104.33.10/ARIA/doc/ARIA-specification-e.pdf)
 * - [RFC5794](https://www.rfc-editor.org/rfc/rfc5794)
 */
export class Aria192 extends AAria implements IBlockCrypt {
	constructor(key: Uint8Array) {
		super(14, key, c2, c3, c1);
	}
}

/**
 * [ARIA](http://210.104.33.10/ARIA/index-e.html)
 * ([Wiki](https://en.wikipedia.org/wiki/ARIA_(cipher)))
 *
 * ARIA is a general-purpose involutional SPN block cipher algorithm, 
 * optimized for lightweight environments and hardware implementation.
 * 
 * First published: *2003*
 * Block size: *16 bytes*
 * Key size: *32 bytes*
 * Nonce size: *0 bytes*
 * Rounds: *16*
 *
 * Specified in:
 * - [ARIA Spec v1.0](http://210.104.33.10/ARIA/doc/ARIA-specification-e.pdf)
 * - [RFC5794](https://www.rfc-editor.org/rfc/rfc5794)
 */
export class Aria256 extends AAria implements IBlockCrypt {
	constructor(key: Uint8Array) {
		super(16, key, c3, c1, c2);
	}
}
