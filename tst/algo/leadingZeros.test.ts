import { suite } from 'uvu';
import { leadingZeros } from '../../src/algo/leadingZeros';
import * as assert from 'uvu/assert';

const tsts = suite('leadingZeros');

const tests: [number, number][] = [
    [0, 32],
    [3, 30],
    [1054 , 21],
    [0x6d2b79f5,1],//Const from mulberry32
    [0x4c957f2d,1],//Const from Pcg32
    [0x5851f42d,1],//Const from Pcg32

    [1, 31],//2**0
    [2, 30],//2**1
    [4, 29],//2**2
    [8, 28],//2**3
    [16, 27],//2**4
    [32, 26],//2**5
    [64, 25],//2**6
    [128, 24],//2**7
    [256, 23],//2**8
    [512, 22],//2**9
    [1024, 21],//2**10
    [2048, 20],//2**11
    [4096, 19],//2**12
    [8192, 18],//2**13
    [16384, 17],//2**14
    [32768, 16],//2**15
	[65536, 15],//2**16
	[131072, 14],//2**17
	[262144, 13],//2**18
	[524288, 12],//2**19
	[1048576, 11],//2**20
	[2097152, 10],//2**21
	[4194304, 9],//2**22
	[8388608, 8],//2**23
    [16777216,7],//2**24
    [33554432,6],//2**25
    [67108864,5],//2**26
    [134217728,4],//2**27
    [268435456,3],//2**28
    [536870912,2],//2**29
    [1073741824,1],//2**30
    [2147483648, 0],//2**31
    [-1,0],
    [4294967295,0],//2**32-1
];
for (const [n, expect] of tests) {
    tsts(`leadingZeros(${n})`, () => {
        const found = leadingZeros(n);
        assert.equal(found, expect);
    });
}

tsts.run();
