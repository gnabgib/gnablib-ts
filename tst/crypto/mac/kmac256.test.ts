import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex, utf8 } from '../../../src/codec';
import { Kmac256 } from '../../../src/crypto';

const tsts = suite('KMAC256');

type hashHex={
    key:string,
    data:string|Uint8Array,
    size?:number,
    customize?:string,
    expect:string
};

const tests:hashHex[]=[
    //http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/KMAC_samples.pdf
    {
        key:'@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_',
        data:hex.toBytes('00010203'),
        customize:'My Tagged Application',
        expect:'20C570C31346F703C9AC36C61C03CB64C3970D0CFC787E9B79599D273A68D2F7F69D4CC3DE9D104A351689F27CF6F5951F0103F33F4F24871024D9C27773A8DD'
    },
    {
        key:'@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_',
        data:hex.toBytes('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7'),
        expect:'75358CF39E41494E949707927CEE0AF20A3FF553904C86B08F21CC414BCFD691589D27CF5E15369CBBFF8B9A4C2EB17800855D0235FF635DA82533EC6B759B69'
    },
    {
        key:'@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_',
        data:hex.toBytes('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7'),
        customize:'My Tagged Application',
        expect:'B58618F71F92E1D56C1B8C55DDD7CD188B97B4CA4D99831EB2699A837DA2E4D970FBACFDE50033AEA585F1A2708510C32D07880801BD182898FE476876FC8965'
    },
    //echo -n "hello" | openssl mac -macopt key:test -macopt size:64 KMAC256
    {
        key:'test',
        data:'hello',
        expect:'BDA0F4A6504B10853BB846A0F916D344637CE447B42C224469BB0C23413A800BCB2029B53CAAF81A814A5EC449957D68E5AAB2CCFD50F8E2D26BD32626B6CB72'
    },
    {
        key:'gnabgib',
        data:'Hello',
        expect:'463759E9B2F23B0C20A8AB01B47BE38714A4727B90CA58F762B2821F57BF569D7B062A4473E56D2637A1A5367A6651303802A6981F04B59C0EF8A8BF956BEA63'
    },
    {
        key:'gnabgib',
        data:'Hello',
        size:33,
        expect:'96DFD49711BEACF2C14D979E36CC29FAD340AB04060D78E745DA53BDAE4818CC86'
    },
    {
        key:'gnabgib',
        data:'Hello',
        size:128,
        expect:'E9F64C75A48A0CF4813B25CE95B0F71168BF50611565A879BAE1B8FAEB91011F15E15FBF8DECBDB222EB5E60806A1CF7BC1549123EC5F79E29323117546B8D764CF7E849E25D52C1FAF8446E42DC62CB379F1D7C9BDAB40EE605F5203E3E6D2EC47B8FA884517C7D54FF9D821D739A8A794BD541DE5274006191198386858DC0'
    },
];

let count=0;
for (const test of tests) {
    tsts(`mac[${count++}]`,()=>{
        const bMsg=test.data instanceof Uint8Array ? test.data : utf8.toBytes(test.data);
        const mac=new Kmac256(test.size,test.key,test.customize);
        mac.write(bMsg);
        const found=mac.sum();
        assert.is(hex.fromBytes(found),test.expect);
    });
}

tsts.run();
