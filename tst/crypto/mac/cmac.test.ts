import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex } from '../../../src/codec';
import { Cmac } from '../../../src/crypto/mac';

const tsts = suite('CMAC');

const tests:[string,string,string][]=[
    //https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/AES_CMAC.pdf
    //AES128 Example 1
    [
        '2B7E151628AED2A6ABF7158809CF4F3C',
        '',
        'BB1D6929E95937287FA37D129B756746'
    ],
    //AES128 Example 2
    [
        '2B7E151628AED2A6ABF7158809CF4F3C',
        '6BC1BEE22E409F96E93D7E117393172A',
        '070A16B46B4D4144F79BDD9DD04A287C'
    ],
    //AES128 Example 3
    [
        '2B7E151628AED2A6ABF7158809CF4F3C',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A57',
        '7D85449EA6EA19C823A7BF78837DFADE'
    ],
    //AES128 Example 4
    [
        '2B7E151628AED2A6ABF7158809CF4F3C',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411E5FBC1191A0A52EFF69F2445DF4F9B17AD2B417BE66C3710',
        '51F0BEBF7E3B9D92FC49741779363CFE'
    ],
    //AES192 Example 1
    [
        '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B',
        '',
        'D17DDF46ADAACDE531CAC483DE7A9367'
    ],
    //AES192 Example 2
    [
        '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B',
        '6BC1BEE22E409F96E93D7E117393172A',
        '9E99A7BF31E710900662F65E617C5184'
    ],
    //AES192 Example 3
    [
        '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A57',
        '3D75C194ED96070444A9FA7EC740ECF8'
    ],
    //AES192 Example 4
    [
        '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411E5FBC1191A0A52EFF69F2445DF4F9B17AD2B417BE66C3710',
        'A1D5DF0EED790F794D77589659F39A11'
    ],
    //AES256 Example 1
    [
        '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4',
        '',
        '028962F61B7BF89EFC6B551F4667D983'
    ],
    //AES256 Example 2
    [
        '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4',
        '6BC1BEE22E409F96E93D7E117393172A',
        '28A7023F452E8F82BD4BF28D8C37C35C'
    ],
    //AES256 Example 3
    [
        '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A57',
        '156727DC0878944A023C1FE03BAD6D93'
    ],
    //AES256 Example 4
    [
        '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411E5FBC1191A0A52EFF69F2445DF4F9B17AD2B417BE66C3710',
        'E1992190549F6ED5696A2C056C315410'
    ],
    //https://csrc.nist.gov/CSRC/media/Projects/Block-Cipher-Techniques/documents/BCM/proposed-modes/omac/omac-ad.pdf
    //Most of these are dupes
    //AES128 Vector 40 
    [
        '2B7E151628AED2A6ABF7158809CF4F3C',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411',
        'DFA66747DE9AE63030CA32611497C827'
    ],
    //AES192 Vector 40 
    [
        '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411',
        '8A1DE5BE2EB31AAD089A82E6EE908B0E'
    ],
    //AES256 Vector 40 
    [
        '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4',
        '6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411',
        'AAF3D8F1DE5640C232F5B169B9C911E6'
    ],
];
let count=0;
for(const [key,input,expect] of tests) {
    tsts(`mac[${count++}]`,()=>{
        const mac=new Cmac(hex.toBytes(key));
        mac.write(hex.toBytes(input));
        const found=mac.sum();
        assert.is(hex.fromBytes(found),expect);
    });
}

tsts('reset',()=>{
    const mac=new Cmac(hex.toBytes('2B7E151628AED2A6ABF7158809CF4F3C'));
    mac.write(Uint8Array.of(0));
    assert.is(hex.fromBytes(mac.sum()),'2BECEAA81BBD0F09A26BC4AD28B7DD18','original sum');
    mac.reset();
    assert.is(hex.fromBytes(mac.sum()),'BB1D6929E95937287FA37D129B756746','reset sum');
});

tsts('newEmpty',()=>{
    const mac=new Cmac(hex.toBytes('2B7E151628AED2A6ABF7158809CF4F3C'));
    mac.write(Uint8Array.of(0));
    assert.is(hex.fromBytes(mac.sum()),'2BECEAA81BBD0F09A26BC4AD28B7DD18','original sum');

    const other=mac.newEmpty();
    //Note it doesn't have any written data
    assert.is(hex.fromBytes(other.sum()),'BB1D6929E95937287FA37D129B756746','clone sum');
});

tsts.run();
