import { suite } from 'uvu';
import {Assert} from '../../../src/test/assert';
import * as uAssert from 'uvu/assert';
import { hex, utf8 } from '../../../src/codec';
import { Sha1 } from '../../../src/crypto/hash';

const tsts = suite('SHA1/RFC 3174');

const asciiHexPairs = [
	//Source: https://en.wikipedia.org/wiki/SHA-1
	['', 'DA39A3EE5E6B4B0D3255BFEF95601890AFD80709'],
	[
		'The quick brown fox jumps over the lazy dog',
		'2FD4E1C67A2D28FCED849EE1BB76E7391B93EB12',
	],
	[
		'The quick brown fox jumps over the lazy cog',
		'DE9F2C7FD25E1B3AFAD3E85A0BD17D9B100DB4B3',
	],
	//https://datatracker.ietf.org/doc/html/rfc3174
	['abcde', '03DE6C570BFE24BFC328CCD7CA46B76EADAF4334'],
	//https://md5calc.com/hash/sha1/abcde

	// ['\0','47C61A0FA8738BA77308A8A600F88E4B'],
	['a', '86F7E437FAA5A7FCE15D1DDCB9EAEAEA377667B8'],
	['abc', 'A9993E364706816ABA3E25717850C26C9CD0D89D'],
	['message digest', 'C12252CEDA8BE8994D5FA0290A47231C1D16AAE3'],
	['abcdefghijklmnopqrstuvwxyz', '32D10C7B8CF96570CA04CE37F2A19D84240D3A89'],

	['ABCDEFGHIJKLMNOPQRSTUVWXYZ', '80256F39A9D308650AC90D9BE9A72A9562454574'],
	['ABCDEFGHIJKLMNOPQRSTUVWXYZa', 'C5212DA7B99D33E7471E866524909E774D6DE183'],
	['ABCDEFGHIJKLMNOPQRSTUVWXYZab', '8B706BBD66CFA0DA6B3A5D72EF4CF49E5A8D52B7'],
	['ABCDEFGHIJKLMNOPQRSTUVWXYZabc', 'A626F97CE49A8A339C4B130963AABB70FD272D15'],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcd',
		'BC968F5C6F5150E2590C44E5AE97C51850460B14',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcde',
		'02C4D8FC792167B37E9AC38019D993040F53C08B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef',
		'481B363D0F0429AF577EB692B333696949756253',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg',
		'74D0ADAEF85826431865FE8B3152C5552413EEFB',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh',
		'E9DD61F9A97A170AD4582BB712CD89714A506CD8',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi',
		'327C4AD777CAF55F290A0616A25B94AD68EE2247',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghij',
		'3165697CEEB171C2264B9480E5576F94E8C561D0',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijk',
		'EC0286B7C2D0B47E194E1C2E04667C822E65205A',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkl',
		'6FDA111E9ED759BE37BBAD723BBCD94CDCC541CC',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm',
		'48A3BEF875F5F079DF63A942786A2C5AE47913F6',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn',
		'1D20B933242C7B5439F5E1D90C943ACDF75BF927',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmno',
		'987EBA70F3147DA48A66404CABDEB15878C4C4D0',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnop',
		'6359ED94E6C04A85D0A185E6819844452AC0A284',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopq',
		'A69DA6DCB80E175D337B954064B88B35CFEF64FA',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr',
		'ECBBD256285E2DE0CE506223FC1386074C24526F',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrs',
		'DB83FA47440A6ADB393049E82086450060E3E84B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrst',
		'8EA955AF5D68C11FCDD9DB4FD02671747D022577',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstu',
		'133F8A335E2665B3FD1F3905DC8D321131185DF2',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuv',
		'627D9F13D24237FD4EF501F648540893EE1A5014',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw',
		'5B5A8DF709C1DE25BBBE3EE37BDF1463A082A357',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx',
		'E3B3C7AA94124277EDFB615AFCDB6205D15AD247',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy',
		'C1E3E2FE1721AAF2D247CBC84E5D3677C0F7D722',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
		'DD84CA54B659A76225848C17A36AE581B48ECAF2',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0',
		'E742D6747979767CC4E7896799FC42EC510F646E',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01',
		'608F31233D7F9C0D6B0AB064A5B1503509115879',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012',
		'25F4E40E4DB12DB0C83A4CD66F3B30E9D76951C7',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123',
		'D0C4BA5ED896C8E115F80C5E048DA5BD34FF62E8',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234',
		'58E6E05BDCA8194EE8620BCE7F89E90C6ED6614A',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345',
		'5BCAF5F24E673A2E463F58AA09CEE9E1235335BA',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456',
		'EB8DEBCAF9064A59C447B64BE7229A3059628B5B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567',
		'D965D3B6DE36381CC149D2C803F032B46704AC95',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678',
		'E53E92CA7F315CA1CADA88FBA669D2856EFC644A',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
		'761C457BF73B14D27E9E9265C46F4B4DDA11F940',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'50ABF5706A150990A08B2C5EA40FA0E585554732',
	],

	['f', '4A0A19218E082A343A1B17E5333409AF9D98F0F5'],
	['fo', '19082866D46A5A57BFEFFE585D8362C149676C90'],
	['foo', '0BEEC7B5EA3F0FDBC95D0DD47F3C5BC275DA8A33'],
	['foob', '2CA60EC33DA4CCDF3C5B4944A2E831A70D76D7C7'],
	['fooba', 'BF3F6E65DAA76DDE92612355478885EB52473854'],
	['foobar', '8843D7F92416211DE9EBB963FF4CE28125932878'],
	['foo bar baz٪☃🍣', 'AAD27FE9E36C1BE5540F10685E30E35A5000C803'],
	['gnabgib', '59CE38AD8B36D3207BB985D984A779173ACA8BC4'],

	//You can also test in linux: `echo -n gnabgib | sha1sum -`
];

for (const [source,expect] of asciiHexPairs) {
	tsts('Sha1:' + source, () => {
		const b = utf8.toBytes(source);
		const hash=new Sha1();
		hash.write(b);
		const md=hash.sum();
		uAssert.is(hex.fromBytes(md), expect);
	});
}

tsts('Sequential Hash: a/ab/b',()=> {
	const hash=new Sha1();
	//md(a)
	hash.write(utf8.toBytes('a'));
	Assert.bytesMatchHex(hash.sum(), '86F7E437FAA5A7FCE15D1DDCB9EAEAEA377667B8');
	//md(ab)
	hash.write(utf8.toBytes('b'));
	Assert.bytesMatchHex(hash.sum(), 'DA23614E02469A0D7C7BD1BDAB5C9C474B1904DC');
	//md(b)
	hash.reset();
	hash.write(utf8.toBytes('b'));
	Assert.bytesMatchHex(hash.sum(), 'E9D71F5EE7C92D6DC9E92FFDAD17B8BD49418F98');
});

tsts.run();
