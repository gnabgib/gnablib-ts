import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex } from '../../../src/codec';
import { Skein1024 } from '../../../src/crypto/hash/Skein';

const tsts = suite('Skein1024');

const iNullres =
	'0FFF9563BB3279289227AC77D319B6FFF8D7E9F09DA1247B72A0A265CD6D2A62' +
	'645AD547ED8193DB48CFF847C06494A03F55666D3B47EB4C20456C9373C86297' +
	'D630D5578EBD34CB40991578F9F52B18003EFA35D3DA6553FF35DB91B81AB890' +
	'BEC1B189B7F52CB2A783EBB7D823D725B0B4A71F6824E88F68F982EEFC6D19C6';
const iFFres =
	'E62C05802EA0152407CDD8787FDA9E35703DE862A4FBC119CFF8590AFE79250B' +
	'CCC8B3FAF1BD2422AB5C0D263FB2F8AFB3F796F048000381531B6F00D85161BC' +
	'0FFF4BEF2486B1EBCD3773FABF50AD4AD5639AF9040E3F29C6C931301BF79832' +
	'E9DA09857E831E82EF8B4691C235656515D437D2BDA33BCEC001C67FFDE15BA8';

const test_bytes: [string, string][] = [
	//https://web.archive.org/web/20140824053109/http://www.skein-hash.info/sites/default/files/skein1.3.pdf (Appendix C)
	['FF', iFFres],
	[
		'FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0' +
			'DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0' +
			'BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0' +
			'9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180',

		'1F3E02C46FB80A3FCD2DFBBC7C173800B40C60C2354AF551189EBF433C3D85F9' +
			'FF1803E6D920493179ED7AE7FCE69C3581A5A2F82D3E0C7A295574D0CD7D217C' +
			'484D2F6313D59A7718EAD07D0729C24851D7E7D2491B902D489194E6B7D369DB' +
			'0AB7AA106F0EE0A39A42EFC54F18D93776080985F907574F995EC6A37153A578',
	],
	[
		'FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0' +
			'DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0' +
			'BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0' +
			'9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180' +
			'7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160' +
			'5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140' +
			'3F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120' +
			'1F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100',

		'842A53C99C12B0CF80CF69491BE5E2F7515DE8733B6EA9422DFD676665B5FA42' +
			'FFB3A9C48C217777950848CECDB48F640F81FB92BEF6F88F7A85C1F7CD1446C9' +
			'161C0AFE8F25AE444F40D3680081C35AA43F640FD5FA3C3C030BCC06ABAC01D0' +
			'98BCC984EBD8322712921E00B1BA07D6D01F26907050255EF2C8E24F716C52A5',
	],
	//github.com/aead/skein/
	['', iNullres],
	[
		'FBD17C26B61A82E12E125F0D459B96C91AB4837DFF22B39B78439430CDFC5DC8' +
			'78BB393A1A5F79BEF30995A85A12923339BA8AB7D8FC6DC5FEC6F4ED22C122BB' +
			'E7EB61981892966DE5CEF576F71FC7A80D14DAB2D0C03940B95B9FB3A727C66A' +
			'6E1FF0DC311B9AA21A3054484802154C1826C2A27A0914152AEB76F1168D4410',

		'96CA81F586C825D0360AEF5ACAEC49AD55289E1797072EEE198B64F349CE65B6' +
			'E6ED804FE38F05135FE769CC56240DDDA5098F620865CE4A4278C77FA2EC6BC3' +
			'1C0F354CA78C7CA81665BFCC5DC54258C3B8310ED421D9157F36C093814D9B25' +
			'103D83E0DDD89C52D0050E13A64C6140E6388431961685734B1F138FE2243086',
	],
];
for (const [source, expect] of test_bytes) {
	tsts(`Skein-1024(x${source})`, () => {
		const hash = new Skein1024();
		hash.write(hex.toBytes(source));
		const md = hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const test_size: [string, number, string][] = [
	//github.com/aead/skein1024
	[
		'FBD17C26B61A82E12E125F0D459B96C91AB4837DFF22B39B78439430CDFC5DC8' +
			'78BB393A1A5F79BEF30995A85A12923339BA8AB7D8FC6DC5FEC6F4ED22C122BB' +
			'E7EB61981892966DE5CEF576F71FC7A80D14DAB2D0C03940B95B9FB3A727C66A' +
			'6E1FF0DC311B9AA21A3054484802154C1826C2A27A0914152AEB76F1168D4410',
		20,
		'2E6A4CBF2EF05EA9C24B93E8D1DE732DDF2739EB',
	],
	[
		'FBD17C26B61A82E12E125F0D459B96C91AB4837DFF22B39B78439430CDFC5DC8' +
			'78BB393A1A5F79BEF30995A85A12923339BA8AB7D8FC6DC5FEC6F4ED22C122BB' +
			'E7EB61981892966DE5CEF576F71FC7A80D14DAB2D0C03940B95B9FB3A727C66A' +
			'6E1FF0DC311B9AA21A3054484802154C1826C2A27A0914152AEB76F1168D4410',
		28,
		'1D6DE19F37F7A3C265440EECB4B9FBD3300BB5AC60895CFC0D4D3C72',
	],
	[
		'FBD17C26B61A82E12E125F0D459B96C91AB4837DFF22B39B78439430CDFC5DC8' +
			'78BB393A1A5F79BEF30995A85A12923339BA8AB7D8FC6DC5FEC6F4ED22C122BB' +
			'E7EB61981892966DE5CEF576F71FC7A80D14DAB2D0C03940B95B9FB3A727C66A' +
			'6E1FF0DC311B9AA21A3054484802154C1826C2A27A0914152AEB76F1168D4410',
		32,
		'986A4D472B123E8148731A8EAC9DB23325F0058C4CCBC44A5BB6FE3A8DB672D7',
	],
	[
		'FBD17C26B61A82E12E125F0D459B96C91AB4837DFF22B39B78439430CDFC5DC8' +
			'78BB393A1A5F79BEF30995A85A12923339BA8AB7D8FC6DC5FEC6F4ED22C122BB' +
			'E7EB61981892966DE5CEF576F71FC7A80D14DAB2D0C03940B95B9FB3A727C66A' +
			'6E1FF0DC311B9AA21A3054484802154C1826C2A27A0914152AEB76F1168D4410',
		48,
		'9C3D0648C11F31C18395D5E6C8EBD73F43D189843FC45235E2C35E345E12D62B' +
			'C21A41F65896DDC6A04969654C2E2CE9',
	],
	[
		'FBD17C26B61A82E12E125F0D459B96C91AB4837DFF22B39B78439430CDFC5DC8' +
			'78BB393A1A5F79BEF30995A85A12923339BA8AB7D8FC6DC5FEC6F4ED22C122BB' +
			'E7EB61981892966DE5CEF576F71FC7A80D14DAB2D0C03940B95B9FB3A727C66A' +
			'6E1FF0DC311B9AA21A3054484802154C1826C2A27A0914152AEB76F1168D4410',
		257,
		'56A0CAB1AD315859DA7A6CFC35807CBFE039AF06CA4B8671C053360BDA0B17C1' +
			'4A9EB5EB2ABB01B0DB3F45C03CD30C69D7C1B70C5C9EF74C06FB3AEF0C843CE9' +
			'B4C1BA2294DDB5C71CAB692CEDC1E6F908C471B38C0C583418B55AEFDDFE08AB' +
			'A4055D0D19EDB5CCBA16C3E288471EFE463E6BF6CC346CC74F6C013E0293E6DF' +
			'D2E4AA66A92242FD395B6D91AAAD5A071C449D77EA00E44ECC75073890AC50D4' +
			'F4210E8C9DA45385A46D214A0FCCC131DB3F842F955E6E76AC311B3BF439DD51' +
			'9BEDD691785ADF7540F3163AD1216CF2ADB7D4BF40D93BE3184AEF51B651CA26' +
			'C7EC44073F43AD689D269EA9FF02F8D2C8932FE6CED0292F97FB5F07CA276D6B' +
			'43',
	],
];
for (const [source, size, expect] of test_size) {
	tsts(`Skein-1024-${size}B(x${source})`, () => {
		const hash = new Skein1024(size);
		hash.write(hex.toBytes(source));
		const md = hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

tsts(`reset`, () => {
	const hash = new Skein1024();
	hash.write(hex.toBytes(''));
	assert.equal(hex.fromBytes(hash.sum()), iNullres);
	hash.write(hex.toBytes(''));
	assert.equal(hex.fromBytes(hash.sum()), iNullres);

	hash.write(hex.toBytes('FF'));
	assert.equal(hex.fromBytes(hash.sum()), iFFres, 'first sum');
	hash.reset();

	hash.write(hex.toBytes(''));
	assert.equal(hex.fromBytes(hash.sum()), iNullres);
});

tsts(`newEmpty`, () => {
	const hash = new Skein1024();
	hash.write(hex.toBytes('FF'));
	assert.equal(hex.fromBytes(hash.sum()), iFFres);
	const hash2 = hash.newEmpty();
	hash2.write(hex.toBytes('FF'));
	assert.equal(hex.fromBytes(hash2.sum()), iFFres);
});

tsts.run();
