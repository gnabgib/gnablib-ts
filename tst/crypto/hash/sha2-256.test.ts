import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex, utf8 } from '../../../src/codec';
import { Sha256 } from '../../../src/crypto/hash';


const tsts = suite('SHA2/RFC 6234 | FIPS 180-4 (256)');

const ascii256Pairs = [
	//Source: RFC6234
	//test 1
	[
		'abc', 
		'BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD'],
	//test 2
	[
		'abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq', 
		'248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1'],
	//test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), 
		'594847328451BDFA85056225462CC1D867D877FB388DF0CE35F25AB5562BFBB5'],
	//test 7 - todo implement extra bits code?
	//test 9 - todo implement extra bits code?
	
	//Source: https://en.wikipedia.org/wiki/SHA-2
	['', 'E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855'],
	//Source: https://md5calc.com/hash/sha256/
	[
		'The quick brown fox jumps over the lazy dog',
		'D7A8FBB307D7809469CA9ABCB0082E4F8D5651E46D3CDB762D02D0BF37C9E592',
	],
	[
		'The quick brown fox jumps over the lazy dog.',
		'EF537F25C895BFA782526529A9B63D97AA631564D5D789C2B765448C8635FB6C',
	],
	[
		'The quick brown fox jumps over the lazy cog',
		'E4C4D8F3BF76B692DE791A173E05321150F7A345B46484FE427F6ACC7ECC81BE',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
		'64CC0AB1A88EFEACD64FA79ECE34EDE044CD6D1C32C2A1C2791E5BA2063C1BEA',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0',
		'22065AAC53D33CEE54C281A300CB298DF54F418BF228A7026C50EB75FB998115',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01',
		'E52A12238B3937D167C5CC243C4176720918EB8CB8C8E183039546E927A3760B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012',
		'59521AA5A72BFD087FC7B180EFFF1E20DC27A7D6232CC1EBB733183D02A8C062',
	],
	//Test the second block
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123',
		'F50E77559FCFB0BE5B298F780857CF0C5F06AF725838431F7C9DA48FF024BA30',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234',
		'A70CDC426E03C55F6BAB861695327E7C7B032D7DA1ED0F1ACA0C252125D4E77A',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345',
		'51B86686860C3C22559132D1496EBA4282F0638C58775E7EC21868F49DAE52F9',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456',
		'5AF72ECE9EB8F1B47555F587D77EEC84B241BC772B434FDA00B60DB5B7039BAD',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567',
		'76EC7029B93450299621397A86535C8E5BD9D7007E28BF545E2B8721535A8170',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678',
		'52EFE19808BE6F333BFAED7BBB1EC0B71D4C118591BC199A3516F946E86BFC63',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
		'DB4BFCBD4DA0CD85A60C3C37D3FBD8805C77F15FC6B1FDFE614EE0A7C8FDB4C0',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'F371BC4A311F2B009EEF952DD83CA80E2B60026C8E935592D0F9C308453C813E',
	],
	[
		'gnabgib',
		'25C883DEF68E954E0E6EB057B8CE3636720A32D5544BCCBF98F780227286D6F7',
	],
];
for (const [source,expect] of ascii256Pairs) {
	tsts('Sha256:' + source, () => {
		const b = utf8.toBytes(source);
		const hash=new Sha256();
		hash.write(b);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const hex256Pairs=[
	//test 6
	[
		'19', 
		'68AA2E2EE5DFF96E3355E6C7EE373E3D6A4E17F75F9518D843709C0C9BC3E3D4'],
	//Test 8
	[
		'e3d72570dcdd787ce3887ab2cd684652',
		'175EE69B02BA9B58E2B0A5FD13819CEA573F3940A94F825128CF4209BEABB4E8'
	],
	//test 10
	[
		'8326754e2277372f4fc12b20527afef04d8a056971b11ad57123a7c137760000d7bef6f3c1f7a9083aa39d810db310777dab8b1e7f02b84a26c773325f8b2374de7a4b5a58cb5c5cf35bcee6fb946e5bd694fa593a8beb3f9d6592ecedaa66ca82a29d0c51bcf9336230e5d784e4c0a43f8d79a30a165cbabe452b774b9c7109a97d138f129228966f6c0adc106aad5a9fdd30825769b2c671af6759df28eb393d54d6', 
		'97DBCA7DF46D62C8A422C941DD7E835B8AD3361763F7E9B2D95F4F0DA6E1CCBC'],
	
];
for (const [source,expect] of hex256Pairs) {
	tsts('Sha256: 0x' + source, () => {
		const h = hex.toBytes(source);
		const hash=new Sha256();
		hash.write(h);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

tsts.run();