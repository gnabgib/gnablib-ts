import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex } from '../../../src/codec';
import { AsconXofA } from '../../../src/crypto/xof';
import { IKat } from '../hash/IKat';


const tsts = suite('Ascon-XofA');

const katTests:IKat[]= [
    {
        descr:'LWC_HASH_KAT_256 1',
        msg:'',
        md:'7C10DFFD6BB03BE262D72FBE1B0F530013C6C4EADAABDE278D6F29D579E3908D'
    },
    {
        descr:'LWC_HASH_KAT_256 2',
        msg:'00',
        md:'965445C46C8E9B948EDFEF7B5879E06AB5F023770EA892FA4B54525008467EA3'
    },
    {
        descr:'LWC_HASH_KAT_256 3',
        msg:'0001',
        md:'48EB41B7A4352AFB8943B765654855B1D7104B22E981E5120DA9962579A7BAE6'
    },
    {
        descr:'LWC_HASH_KAT_256 17',
        msg:'000102030405060708090A0B0C0D0E0F',
        md:'9424B7AE5FA72D3EE4A266112E7ABC4092E815AE29FAB26DA666C1485BA92BDC'
    },
    {
        descr:'LWC_HASH_KAT_256 18',
        msg:'000102030405060708090A0B0C0D0E0F10',
        md:'E559CDAF16DDD0C6E52EDE142B38A713A6A0456AE886A7CC10BAD63C554F2557'
    },
    {
        descr:'LWC_HASH_KAT_256 34',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20',
        md:'87B982C6A6BA140AAB0A1A34FA24CB97DC87FC6B28B2486D76CEE4A46CCD8AD5'
    },
    {
        descr:'LWC_HASH_KAT_256 35',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021',
        md:'AF1AB097BB616BE8E600AFE588EAE62A44C22EF87777DDAF70330DB22913EE1F'
    },
    {
        descr:'LWC_HASH_KAT_256 67',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041',
        md:'5C5DFAE78E0B812895E97157E2DF856C3C14D89036B0FAF0AA515F2AA46557AF'
    },
    {
        descr:'LWC_HASH_KAT_256 68',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142',
        md:'A6AB0DC0372CCE91A142AD69A90B8C691A95476120DAB845E87246A6AC22E345'
    },
    {
        descr:'LWC_HASH_KAT_256 174',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC',
        md:'8779E57DCD40CD6FDC448EAFD8E7C5254D12166946F3947A353E13B77AB3E5B9'
    },
    {
        descr:'LWC_HASH_KAT_256 600',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556',
        md:'7E676F906EA767FDFA44AC9515ED1CA409433B76F4DC4F0505AE8CE26105E0B4'
    },
    {
        descr:'LWC_HASH_KAT_256 1000',
        msg
        md:'313530CCA8639DD30A3A12C910A25996F862FCB8E7EF842A0759E4E45BB065F3'
    },
];
for (const {descr,msg,md} of katTests) {
	const b = hex.toBytes(msg);
	tsts('hash ' + descr, () => {
		const hash=new AsconXofA(32);
		hash.write(b);
		const foundMd=hash.sum();
		assert.is(hex.fromBytes(foundMd), md);
	});
}

tsts.run();
