import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex } from '../../../src/codec';
import { Aria192 } from '../../../src/crypto/sym/Aria';


const tsts = suite('ARIA-192/RFC5794');

// prettier-ignore
const tests:[string,string,string][]=[
    //ARIA196(ECB)KAT.txt | https://github.com/RyuaNerin/go-krypto/blob/master/aria/testcases_196_test.go
    //zero key, varying plain
    ['000000000000000000000000000000000000000000000000','80000000000000000000000000000000','AE56BF59874ED4DBD7B905878894ADEE'],
    ['000000000000000000000000000000000000000000000000','C0000000000000000000000000000000','9363A89CB6AFE4B0BDB57DBEB42D932E'],
    ['000000000000000000000000000000000000000000000000','E0000000000000000000000000000000','8603867B05270D6C2C32405A496B8937'],
    ['000000000000000000000000000000000000000000000000','F0000000000000000000000000000000','09740D96AB8545757A6B3A78BC648479'],
    ['000000000000000000000000000000000000000000000000','F8000000000000000000000000000000','73360C62DCB4DF8EE231414C9E9EBB12'],
    ['000000000000000000000000000000000000000000000000','FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF','A99DA476851EBC6C3422CC5CBD5A4934'],
    
    //zero plain, varying key
    ['800000000000000000000000000000000000000000000000','00000000000000000000000000000000','F9BA9C6E7E3C86FAE4BEB607F387548E'],
    ['C00000000000000000000000000000000000000000000000','00000000000000000000000000000000','E43600A1A73E25A76A9F207761EBF24B'],
    ['E00000000000000000000000000000000000000000000000','00000000000000000000000000000000','4BA8B5E4C7F7F87512625D17909692CA'],
    ['F00000000000000000000000000000000000000000000000','00000000000000000000000000000000','B66D5B122236F18041ADD330C8921505'],
    ['F80000000000000000000000000000000000000000000000','00000000000000000000000000000000','47112C4221BD391FE23334D41AB76C32'],
    // ['FFFFFFFFFFFFFFFFFFFFFFF8000000000000000000000000','00000000000000000000000000000000','CBF33E01F8E1515E358C40746078B1B0'],
    // ['FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000000','00000000000000000000000000000000','DEBF4E7293223DA91D70A89DCBE03C3D'],
    // ['FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800000','00000000000000000000000000000000','431B84C9E29FD532879E65CE1779DCBC'],
    // ['FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000','00000000000000000000000000000000','509ADA19CAFED18BF1A28D3E19D5763E'],
    // ['FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00','00000000000000000000000000000000','C65692B4C651857FC09232B6C3D167BD'],
    // ['FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE','00000000000000000000000000000000','AB93810618D37B08CACEC8B769B91C52'],
    ['FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF','00000000000000000000000000000000','C4DFD15FC41636060F97E617EB0D7DD7'],
    
    // //zero key, variety key
    ['000000000000000000000000000000000000000000000000','87EC4C14643C0B34D9FA13C93A1421C5','96CBCFCC0487928645A382FE88B7E439'],
    ['000000000000000000000000000000000000000000000000','4835204C2180779C03B241944B586DD6','99CFF43506458844CC8812BDED0AAE4E'],
    ['000000000000000000000000000000000000000000000000','4F31DCF963303109FFDE69EA0C5A816A','C15AF32FD27B08E9709FBA5722D53C95'],
];
for (const [key,plain,enc] of tests) {
    const c=new Aria192(hex.toBytes(key));
    tsts(`Aria192(${key}).encrypt(${plain})`, () => {
        //Set found equal to plain-source-bytes
        const found=hex.toBytes(plain);
        //Encrypt a block (note the test vectors are all one block)
        c.encryptBlock(found);
        assert.is(hex.fromBytes(found),enc);
    });
    tsts(`Aria192(${key}).decrypt(${enc})`, () => {
        //Set found equal to encoded-source-bytes
        const found=hex.toBytes(enc);
        //Decrypt a block (note the test vectors are all one block)
        c.decryptBlock(found);
        assert.is(hex.fromBytes(found),plain);
    });
}


tsts.run();