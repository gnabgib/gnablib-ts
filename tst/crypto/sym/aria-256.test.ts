import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex } from '../../../src/codec';
import { Aria256 } from '../../../src/crypto/sym/Aria';


const tsts = suite('ARIA-256/RFC5794');

// prettier-ignore
const tests:[string,string,string][]=[
    //ARIA196(ECB)KAT.txt | https://github.com/RyuaNerin/go-krypto/blob/master/aria/testcases_196_test.go
    //zero key, varying plain
    ['0000000000000000000000000000000000000000000000000000000000000000','80000000000000000000000000000000','209ACF63CE6DFB56B1F9821DDBFE86E3'],
    ['0000000000000000000000000000000000000000000000000000000000000000','C0000000000000000000000000000000','DC7E45EBD3A8F7E622B7E9E0C9587F45'],
    ['0000000000000000000000000000000000000000000000000000000000000000','E0000000000000000000000000000000','BD9879589609AFEB347D5157A09B2A2C'],
    ['0000000000000000000000000000000000000000000000000000000000000000','F0000000000000000000000000000000','A9A58B66278556792430614C92166DF5'],
    ['0000000000000000000000000000000000000000000000000000000000000000','F8000000000000000000000000000000','B799BE721479A20B6067EFD6228DFA3F'],
    ['0000000000000000000000000000000000000000000000000000000000000000','FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF','361A98CB4F6185A02CAC9F471871D436'],
    
    //zero plain, varying key
    ['8000000000000000000000000000000000000000000000000000000000000000','00000000000000000000000000000000','9250C9771F5A5A8612400AA917491263'],
    ['C000000000000000000000000000000000000000000000000000000000000000','00000000000000000000000000000000','3CDCFE9C25D3ED1302BBED2D2C64839B'],
    ['E000000000000000000000000000000000000000000000000000000000000000','00000000000000000000000000000000','C2CBEDE6EFE77EB759F4F300E1E83BDB'],
    ['F000000000000000000000000000000000000000000000000000000000000000','00000000000000000000000000000000','847EEE9FAE896CBE792E42D70E055642'],
    ['F800000000000000000000000000000000000000000000000000000000000000','00000000000000000000000000000000','C78C401CB00909B9BA66FE684F92B3CE'],
    ['FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF','00000000000000000000000000000000','999F70653BA1039731B63492D8463101'],
    
    // //zero key, variety key
    ['0000000000000000000000000000000000000000000000000000000000000000','B2B3727AC06D1926C849269C4ED7882C','20D8D3678CFFDC3851919ECC315840E5'],
    ['0000000000000000000000000000000000000000000000000000000000000000','9DC1E984B5B2F7EF66EA9144B8C748A4','6DA312786D8B101485DF2CECC847AAC7'],
    ['0000000000000000000000000000000000000000000000000000000000000000','2EAA79B172A25A3AE15C6E8064062385','2D832C42068E6034C883CA9F4D163EC5'],
];
for (const [key,plain,enc] of tests) {
    const c=new Aria256(hex.toBytes(key));
    tsts(`Aria256(${key}).encrypt(${plain})`, () => {
        //Set found equal to plain-source-bytes
        const found=hex.toBytes(plain);
        //Encrypt a block (note the test vectors are all one block)
        c.encryptBlock(found);
        assert.is(hex.fromBytes(found),enc);
    });
    tsts(`Aria256(${key}).decrypt(${enc})`, () => {
        //Set found equal to encoded-source-bytes
        const found=hex.toBytes(enc);
        //Decrypt a block (note the test vectors are all one block)
        c.decryptBlock(found);
        assert.is(hex.fromBytes(found),plain);
    });
}


tsts.run();