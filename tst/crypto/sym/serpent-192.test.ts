import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex } from '../../../src/codec';
import { Serpent_192 } from '../../../src/crypto/sym/Serpent';

const tsts = suite('Serpent/192');

// prettier-ignore
const tests:[string,string,string][]=[
    //https://biham.cs.technion.ac.il/Reports/Serpent/Serpent-192-128.verified.test-vectors
    ['800000000000000000000000000000000000000000000000','00000000000000000000000000000000','9E274EAD9B737BB21EFCFCA548602689'],
    ['400000000000000000000000000000000000000000000000','00000000000000000000000000000000','92FC8E510399E46A041BF365E7B3AE82'],
    ['200000000000000000000000000000000000000000000000','00000000000000000000000000000000','5E0DA386C46AD493DEA203FDC6F57D70'],
    ['100000000000000000000000000000000000000000000000','00000000000000000000000000000000','BEC1E37824CF721E5D87F6CB4EBFB9BE'],
    ['000000000000000000000000000000000000000000000000','00000000000000000000000000000000','A583EF976A292B406BBD5DC8256B0442'],

    ['000000000000000000000000000000000000000000000000','80000000000000000000000000000000','23F5F432AD687E0D4574C16459618ABB'],
    ['000000000000000000000000000000000000000000000000','40000000000000000000000000000000','56CD894936F6E9A4A4304CAE06F97CE3'],
    ['000000000000000000000000000000000000000000000000','20000000000000000000000000000000','B604D94F461AF9F4771BC53F8E3C227B'],
    ['000000000000000000000000000000000000000000000000','10000000000000000000000000000000','BB852AC4756880630D6D63951D3D2602'],

    ['000102030405060708090A0B0C0D0E0F1011121314151617','00112233445566778899AABBCCDDEEFF','6AB816C82DE53B93005008AFA2246A02'],
    ['2BD6459F82C5B300952C49104881FF482BD6459F82C5B300','EA024714AD5C4D84EA024714AD5C4D84','827B18C2678A239DFC5512842000E204'],
];
for (const [key, plain, enc] of tests) {
	const c = new Serpent_192(hex.toBytes(key));
	tsts(`Serpent/192(${key}).encrypt(${plain})`, () => {
		//Set found equal to plain-source-bytes
		const found = hex.toBytes(plain);
		//Encrypt a block (note the test vectors are all one block)
		c.encryptBlock(found);
		assert.is(hex.fromBytes(found), enc);
	});
	tsts(`Serpent/192(${key}).decrypt(${enc})`, () => {
		//Set found equal to encoded-source-bytes
		const found = hex.toBytes(enc);
		//Decrypt a block (note the test vectors are all one block)
		c.decryptBlock(found);
		assert.is(hex.fromBytes(found), plain);
	});
}

tsts.run();
