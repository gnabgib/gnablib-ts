import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import * as utf8 from '../../src/encoding/Utf8';
import * as hex from '../../src/encoding/Hex';
import {
	Sha224,
	Sha256,
	Sha384,
	Sha512,
	Sha512_224,
	Sha512_256,
} from '../../src/hash/Sha2';

const tsts = suite('SHA2/RFC 6234 | FIPS 180-4');

const ascii244Pairs = [
	//Source: RFC6234
	//test 1
	[
		'abc', 
		'23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7'],
	//test 2
	[
		'abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq', 
		'75388B16512776CC5DBA5DA1FD890150B0C6455CB4F58B1952522525'],
	//test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), 
		'567F69F168CD7844E65259CE658FE7AADFA25216E68ECA0EB7AB8262'],

	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'', 
		'D14A028C2A3A2BC9476102BB288234C415A2B01F828EA62AC5B3E42F'],
	[
		'The quick brown fox jumps over the lazy dog',
		'730E109BD7A8A32B1CB9D9A09AA2325D2430587DDBC0C38BAD911525',
	],
	[
		'The quick brown fox jumps over the lazy dog.',
		'619CBA8E8E05826E9B8C519C0A5C68F4FB653E8A3D8AA04BB2C8CD4C',
	],
	//Source: https://md5calc.com/hash/sha224/
	[
		'The quick brown fox jumps over the lazy cog',
		'FEE755F44A55F20FB3362CDC3C493615B3CB574ED95CE610EE5B1E9B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
		'FB2B7C3A66B5F2A611AC6CA9B0043DB11A2C0B4C8DF6AFEA2FAC6CE9',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0',
		'624F9D91CCDFDD8FF042D74044192ED73B5CB658B09F9CD96E4E984A',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01',
		'3F2FA9E0C21C10647C3EE834CCCD79F5580D1423B35FF44B24420BFD',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012',
		'A4619941EF6A62D83370E1081DAD2CF420E8B7E24FB8263F7035EEA2',
	],
	//Test the second block
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123',
		'39C1BDF3C0BDCC97BF0A8E0C99C909AB50191C0C3E99E3B0BF74F631',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234',
		'BAD325803FF15DD690CFE5FF76DA902893B9F0EFB0CC4391479F175C',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456',
		'D1F673D37803088BDD720124E600857292A707087482B17B816A75C0',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567',
		'86BF0E445831C0E64154CE884C21AB679576340421CBDEEB69D2DA04',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678',
		'F4DAB6DA745213E3B6AF34026E90DBD2D64228E3A739C3C6E56BD4B2',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
		'BFF72B4FCB7D75E5632900AC5F90D219E05E97A7BDE72E740DB393D9',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'B50AECBE4E9BB0B57BC5F3AE760A8E01DB24F203FB3CDCD13148046E',
	],
	['gnabgib', 'BAC996C38B530F7031B6B838AD4803970BDE1DFC567E5CF6D4CC7722'],
];
for (const [source,expect] of ascii244Pairs) {
	//continue;
	tsts('Sha224:' + source, () => {
		const b = utf8.toBytes(source);
		const hash=new Sha224();
		hash.write(b);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const hex224Pairs=[
	//Test 6
	[
		'07', 
		'00ECD5F138422B8AD74C9799FD826C531BAD2FCABC7450BEE2AA8C2A'],
	//Test 8
	[
		'18804005dd4fbd1556299d6f9d93df62',
		'DF90D78AA78821C99B40BA4C966921ACCD8FFB1E98AC388E56191DB1'
	],
	//test 10
	[
		'55b210079c61b53add520622d1ac97d5cdbe8cb33aa0ae344517bee4d7ba09abc8533c5250887a43bebbac906c2e1837f26b36a59ae3be7814d506896b718b2a383ecdac16b96125553f416ff32c6674c74599a9005386d9ce1112245f48ee470d396c1ed63b92670ca56ec84deea814b6135eca54392bdedb9489bc9b875a8baf0dc1ae785736914ab7daa264bc079d269f2c0d7eddd810a426145a0776f67c878273',
		'0B31894EC8937AD9B91BDFBCBA294D9ADEFAA18E09305E9F20D5C3A4'],
];
for (const [source,expect] of hex224Pairs) {
	tsts('Sha224: 0x' + source, () => {
		const h = hex.toBytes(source);
		const hash=new Sha224();
		hash.write(h);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const ascii256Pairs = [
	//Source: RFC6234
	//test 1
	[
		'abc', 
		'BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD'],
	//test 2
	[
		'abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq', 
		'248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1'],
	//test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), 
		'594847328451BDFA85056225462CC1D867D877FB388DF0CE35F25AB5562BFBB5'],
	//test 7 - todo implement extra bits code?
	//test 9 - todo implement extra bits code?
	
	//Source: https://en.wikipedia.org/wiki/SHA-2
	['', 'E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855'],
	//Source: https://md5calc.com/hash/sha256/
	[
		'The quick brown fox jumps over the lazy dog',
		'D7A8FBB307D7809469CA9ABCB0082E4F8D5651E46D3CDB762D02D0BF37C9E592',
	],
	[
		'The quick brown fox jumps over the lazy dog.',
		'EF537F25C895BFA782526529A9B63D97AA631564D5D789C2B765448C8635FB6C',
	],
	[
		'The quick brown fox jumps over the lazy cog',
		'E4C4D8F3BF76B692DE791A173E05321150F7A345B46484FE427F6ACC7ECC81BE',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
		'64CC0AB1A88EFEACD64FA79ECE34EDE044CD6D1C32C2A1C2791E5BA2063C1BEA',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0',
		'22065AAC53D33CEE54C281A300CB298DF54F418BF228A7026C50EB75FB998115',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01',
		'E52A12238B3937D167C5CC243C4176720918EB8CB8C8E183039546E927A3760B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012',
		'59521AA5A72BFD087FC7B180EFFF1E20DC27A7D6232CC1EBB733183D02A8C062',
	],
	//Test the second block
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123',
		'F50E77559FCFB0BE5B298F780857CF0C5F06AF725838431F7C9DA48FF024BA30',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234',
		'A70CDC426E03C55F6BAB861695327E7C7B032D7DA1ED0F1ACA0C252125D4E77A',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345',
		'51B86686860C3C22559132D1496EBA4282F0638C58775E7EC21868F49DAE52F9',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456',
		'5AF72ECE9EB8F1B47555F587D77EEC84B241BC772B434FDA00B60DB5B7039BAD',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567',
		'76EC7029B93450299621397A86535C8E5BD9D7007E28BF545E2B8721535A8170',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678',
		'52EFE19808BE6F333BFAED7BBB1EC0B71D4C118591BC199A3516F946E86BFC63',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
		'DB4BFCBD4DA0CD85A60C3C37D3FBD8805C77F15FC6B1FDFE614EE0A7C8FDB4C0',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'F371BC4A311F2B009EEF952DD83CA80E2B60026C8E935592D0F9C308453C813E',
	],
	[
		'gnabgib',
		'25C883DEF68E954E0E6EB057B8CE3636720A32D5544BCCBF98F780227286D6F7',
	],
];
for (const [source,expect] of ascii256Pairs) {
	tsts('Sha256:' + source, () => {
		const b = utf8.toBytes(source);
		const hash=new Sha256();
		hash.write(b);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const hex256Pairs=[
	//test 6
	[
		'19', 
		'68AA2E2EE5DFF96E3355E6C7EE373E3D6A4E17F75F9518D843709C0C9BC3E3D4'],
	//Test 8
	[
		'e3d72570dcdd787ce3887ab2cd684652',
		'175EE69B02BA9B58E2B0A5FD13819CEA573F3940A94F825128CF4209BEABB4E8'
	],
	//test 10
	[
		'8326754e2277372f4fc12b20527afef04d8a056971b11ad57123a7c137760000d7bef6f3c1f7a9083aa39d810db310777dab8b1e7f02b84a26c773325f8b2374de7a4b5a58cb5c5cf35bcee6fb946e5bd694fa593a8beb3f9d6592ecedaa66ca82a29d0c51bcf9336230e5d784e4c0a43f8d79a30a165cbabe452b774b9c7109a97d138f129228966f6c0adc106aad5a9fdd30825769b2c671af6759df28eb393d54d6', 
		'97DBCA7DF46D62C8A422C941DD7E835B8AD3361763F7E9B2D95F4F0DA6E1CCBC'],
	
];
for (const [source,expect] of hex256Pairs) {
	tsts('Sha256: 0x' + source, () => {
		const h = hex.toBytes(source);
		const hash=new Sha256();
		hash.write(h);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const ascii384Pairs = [
	//Source: RFC6234
	//test 1
	[
		'abc', 
		'CB00753F45A35E8BB5A03D699AC65007272C32AB0EDED1631A8B605A43FF5BED8086072BA1E7CC2358BAECA134C825A7'],
	//test 2
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu', 
		'09330C33F71147E83D192FC782CD1B4753111B173B3B05D22FA08086E3B0F712FCC7C71A557E2DB966C3E9FA91746039'],
	//test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), 
		'2FC64A4F500DDB6828F6A3430B8DD72A368EB7F3A8322A70BC84275B9C0B3AB00D27A5CC3C2D224AA6B61A0D79FB4596'],	
	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'',
		'38B060A751AC96384CD9327EB1B1E36A21FDB71114BE07434C0CC7BF63F6E1DA274EDEBFE76F65FBD51AD2F14898B95B',
	],
	//Others https://md5calc.com/hash/sha512/
	[
		'The quick brown fox jumps over the lazy dog',
		'CA737F1014A48F4C0B6DD43CB177B0AFD9E5169367544C494011E3317DBF9A509CB1E5DC1E85A941BBEE3D7F2AFBC9B1',
	],
	[
		'The quick brown fox jumps over the lazy dog.',
		'ED892481D8272CA6DF370BF706E4D7BC1B5739FA2177AAE6C50E946678718FC67A7AF2819A021C2FC34E91BDB63409D7',
	],
	[
		'The quick brown fox jumps over the lazy cog',
		'098CEA620B0978CAA5F0BEFBA6DDCF22764BEA977E1C70B3483EDFDF1DE25F4B40D6CEA3CADF00F809D422FEB1F0161B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
		'726380F3D326979940FA452DEE34ACA2078B500D44C3248B7BF1774E0AE897184F47545195973D66CD0B37AA6F997FD1',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0',
		'0E775AEBF86FFE53688A3AD5D7B8D3E638DAE9A2D3C4376C137728203FB93D602AEA54B832F1B8089A86056C8107EAB9',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01',
		'5992E73ECA77AE910E231103CCA480BE6ECB3756779E2A8B6228BC995249784FE8E5FDDAC1CCF595F3D1A91859CB7B42',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012',
		'2F175852B6F9267DF834FB943D079119E99DFB3545A28281F051EB3EF1923254CF960110D9CD79EAACCB48247379CD85',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123',
		'305A570332D183258A54013F2C682B5EB9BD8089D4CD79F0B1F0206EC9978B3A02F9651C8D9AEC78E452E659AE9DDA0B',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234',
		'A8C30E50D509BA66410B977003DB579BBF5FD755C02E15547DE7FE15BC157E8849DCE83E3E6AF34F01A868F1BC34FEC0',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345',
		'7F033975953AA346E68C9986F12E0D95A7700B6EED22BEE5B1BBAED7ACFD8C36E7A2CD5C27022CC73F73B5EED48094FB',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456',
		'41AEB23C31B529FDD7A2BD53EAFDEEBFEFEDC5D3F51530C77F0F270F053983EC1BFC4B41EB9512A718AB54EBEDFA9B06',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567',
		'7B1C0D943B94C40517F47E38B5147A03256A24EB5DF4AE71D0B100702F55B1A4266094E674DDB07ACBE9A59459433319',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678',
		'4AD52B55D7258337B7FB895B612E66EAD39489EFBA298934B7ED1845CE2F1C6427E82F814205D0D61BA41835E3872AC4',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
		'1761336E3F7CBFE51DEB137F026F89E01A448E3B1FAFA64039C1464EE8732F11A5341A6F41E0C202294736ED64DB1A84',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'B12932B0627D1C060942F5447764155655BD4DA0C9AFA6DD9B9EF53129AF1B8FB0195996D2DE9CA0DF9D821FFEE67026',
	],
	[
		'gnabgib',
		'E1E6A3B70FC8D3A57CDBCFE941EF1CA90D38D7BB0BE570C193BDD2AD4ECD7EDA159CB26436A3F9FCEBACE59B7493B563',
	],
];

for (const [source,expect] of ascii384Pairs) {
	const b = utf8.toBytes(source);
	tsts('Sha384: ' + source, () => {
		const hash=new Sha384();
		hash.write(b);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const hex384Pairs=[
	//test 6
	[
		'b9', 
		'BC8089A19007C0B14195F4ECC74094FEC64F01F90929282C2FB392881578208AD466828B1C6C283D2722CF0AD1AB6938'],
	//Test 8
	[
		'a41c497779c0375ff10a7f4e08591739',
		'C9A68443A005812256B8EC76B00516F0DBB74FAB26D665913F194B6FFB0E91EA9967566B58109CBC675CC208E4C823F7'
	],
	//test 10
	[
		'399669e28f6b9c6dbcbb6912ec10ffcf74790349b7dc8fbe4a8e7b3b5621db0f3e7dc87f823264bbe40d1811c9ea2061e1c84ad10a23fac1727e7202fc3f5042e6bf58cba8a2746e1f64f9b9ea352c711507053cf4e5339d52865f25cc22b5e87784a12fc961d66cb6e89573199a2ce6565cbdf13dca403832cfcb0e8b7211e83af32a11ac17929ff1c073a51cc027aaedeff85aad7c2b7c5a803e2404d96d2a77357bda1a6daeed17151cb9bc5125a422e941de0ca0fc5011c23ecffefdd09676711cf3db0a3440720e1615c1f22fbc3c721de521e1b99ba1bd5577408642147ed096', 
		'4F440DB1E6EDD2899FA335F09515AA025EE177A79F4B4AAF38E42B5C4DE660F5DE8FB2A5B2FBD2A3CBFFD20CFF1288C0'],
	
];
for (const [source,expect] of hex384Pairs) {
	tsts('Sha384: 0x' + source, () => {
		const h = hex.toBytes(source);
		const hash=new Sha384();
		hash.write(h);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const ascii512_224Pairs = [
	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'',
		'6ED0DD02806FA89E25DE060C19D3AC86CABB87D6A0DDD05C333B84F4'],
	//Others https://md5calc.com/hash/sha512/		
	[
		'gnabgib', 
		'63C7E6AE3EB9365315BF7D8E41F3B1737597962C66B3A29143394299'],
];
for (const [source,expect] of ascii512_224Pairs) {
	const b = utf8.toBytes(source);
	tsts('Sha512/224: ' + source, () => {
		const hash=new Sha512_224();
		hash.write(b);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const ascii512_256 = [
	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'',
		'C672B8D1EF56ED28AB87C3622C5114069BDD3AD7B8F9737498D0C01ECEF0967A'],
	//Others https://md5calc.com/hash/sha512/
	[
		'gnabgib',
		'FDED532E1BA8CF9F02F2F2A47B1E61275ED2818A2FAD8818AFD3114A01849D5B',
	],
];
for (const [source,expect] of ascii512_256) {
	const b = utf8.toBytes(source);
	tsts('Sha512/256: ' + source, () => {
		const hash=new Sha512_256();
		hash.write(b);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const ascii512Pairs = [
	//Source: RFC6234
	//test 1
	[
		'abc', 
		'DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA20A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD454D4423643CE80E2A9AC94FA54CA49F'],
	//test 2
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu', 
		'8E959B75DAE313DA8CF4F72814FC143F8F7779C6EB9F7FA17299AEADB6889018501D289E4900F7E4331B99DEC4B5433AC7D329EEB6DD26545E96E55B874BE909'],
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrst',
		'0988DB6EE79AA0B4B28B0B3D2D9D50A0C2782144BA51A0405BDF82F04E895FB6A4848953A0028D33DD6FCE20C3994D078F8382DFC48903521C7AA744DDEBF6C6'],
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstuv', 
		'3BAC30B4B4933AB8A535CB7B240788A34177AC2F7B76D8D0C8FC154EF9F48D5D5BF880F32C9CE525599D496C6DAA77C3E32F5072A9E41B684E8DDDFB3D816D8D'],
	//test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), //512 bits
		'89D05BA632C699C31231DED4FFC127D5A894DAD412C0E024DB872D1ABD2BA8141A0F85072A9BE1E2AA04CF33C765CB510813A39CD5A84C4ACAA64D3F3FB7BAE9'],
	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'',
		'CF83E1357EEFB8BDF1542850D66D8007D620E4050B5715DC83F4A921D36CE9CE47D0D13C5D85F2B0FF8318D2877EEC2F63B931BD47417A81A538327AF927DA3E',
	],
	//Others https://md5calc.com/hash/sha512/
	[
		'The quick brown fox jumps over the lazy dog',
		'07E547D9586F6A73F73FBAC0435ED76951218FB7D0C8D788A309D785436BBB642E93A252A954F23912547D1E8A3B5ED6E1BFD7097821233FA0538F3DB854FEE6',
	],
	[
		'The quick brown fox jumps over the lazy dog.',
		'91EA1245F20D46AE9A037A989F54F1F790F0A47607EEB8A14D12890CEA77A1BBC6C7ED9CF205E67B7F2B8FD4C7DFD3A7A8617E45F3C463D481C7E586C39AC1ED',
	],
	[
		'The quick brown fox jumps over the lazy cog',
		'3EEEE1D0E11733EF152A6C29503B3AE20C4F1F3CDA4CB26F1BC1A41F91C7FE4AB3BD86494049E201C4BD5155F31ECB7A3C8606843C4CC8DFCAB7DA11C8AE5045',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
		'59034B1D16E36833960DDAA51EDAE7858F462E7D49A4E9F7383BAF1553AF7B21F4E1502362048BA70EA94C975C3B5B005E99775ED099EA4C7349EF21F01AA9CD',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0',
		'50DFF3E8D4A7C4EFD1B5D336412DB781384B42FFE960413A0060334CCD8C93FC04B10D984E31DD3E8AEB791D7EE202927F444B88AA063E5E042CED9266120F1D',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01',
		'7C6E8AE9985EC6123F95CAC60DC630729C70472DE027C3634246527798BBF1C2BFD7BFA91BC082CD04A758A8A192A88A63E3E633A21E9A82D6AB0130E0D9A8E9',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012',
		'3037112031AEBDE97B47CF86A08FD53C7273010B35A13DA3C6321A7A3567AD0D6985B74CD6F94A89A1800DB203C91DA0AE8B0D12D6AB335E7F2F00723AB112A5',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123',
		'1FA0ABEBA710B6A54FFFC6D9FEFB0E64CC7D105170C840A732D2886DB173F38CC7D6EC40D1CC064A90794D9E8DB9D5A2D37829BE9A0D7EFF8550FC62ADECB2F0',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234',
		'BDB3E36C98BD645E70427A4001F8EC910F6CA63235C25202FED3F5B9BABCA1980231CE2FEBF4A38A2029425C23E196D2B2AF9438B4FDFC573F297AB3EDEF9139',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345',
		'7772E7E534F2C8C24919329B55FC1F85DDE970C2D8EB857A12061FDD2C73BA5A4D842C6930DC893563D6128101A4BD27A224D5A054945340DFF107947093E0BA',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456',
		'B5D6E32452CFA02A8690F18E1C5243FE3C6378D8CA3EE3245DC755B51D8C6904F2C50EB1B3416AF897D7752BD4B9C800CE3CFC470DFD96A38EB007A429309DD4',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567',
		'69403723418415475A4B2FD077D628A252038016BE7902AD6C2CE11BB0C6CEA5BFD343BA5486F532DF03835DB68DB95E6AF4CB4D1BA914E699F68CC122891B84',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678',
		'E170A07451A013E066C96DF6110AE81E4B647B5AD0A71F904E4D94C817EC2AAC8E7EB946979DC95056B4807119C12D5D2E22081E33FAFC288A6E0FF1166E32BC',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
		'1E07BE23C26A86EA37EA810C8EC7809352515A970E9253C26F536CFC7A9996C45C8370583E0A78FA4A90041D71A4CEAB7423F19C71B9D5A3E01249F0BEBD5894',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'72EC1EF1124A45B047E8B7C75A932195135BB61DE24EC0D1914042246E0AEC3A2354E093D76F3048B456764346900CB130D2A4FD5DD16ABB5E30BCB850DEE843',
	],
	[
		'gnabgib',
		'5B58B7C85B03D1F9AA15D0972EEE02C632214CCF5622B8DB7D940EC30E17DCA053EA11468DB229A82907F216BE33D3C041CA616622FB5AABCBB05D4008CC889C',
	],
];
for (const [source,expect] of ascii512Pairs) {
	const b = utf8.toBytes(source);
	tsts('Sha512:' + source, () => {
		const hash=new Sha512();
		hash.write(b);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

const hex512Pairs=[
	//test 6
	[
		'D0', 
		'9992202938E882E73E20F6B69E68A0A7149090423D93C81BAB3F21678D4ACEEEE50E4E8CAFADA4C85A54EA8306826C4AD6E74CECE9631BFA8A549B4AB3FBBA15'],
	//Test 8
	[
		'8d4e3c0e3889191491816e9d98bff0a0',
		'CB0B67A4B8712CD73C9AABC0B199E9269B20844AFB75ACBDD1C153C9828924C3DDEDAAFE669C5FDD0BC66F630F6773988213EB1B16F517AD0DE4B2F0C95C90F8'
	],
	//test 10
	[
		'a55f20c411aad132807a502d65824e31a2305432aa3d06d3e282a8d84e0de1de6974bf495469fc7f338f8054d58c26c49360c3e87af56523acf6d89d03e56ff2f868002bc3e431edc44df2f0223d4bb3b243586e1a7d924936694fcbbaf88d9519e4eb50a644f8e4f95eb0ea95bc4465c8821aacd2fe15ab4981164bbb6dc32f969087a145b0d9cc9c67c22b763299419cc4128be9a077b3ace634064e6d99283513dc06e7515d0d73132e9a0dc6d3b1f8b246f1a98a3fc72941b1e3bb2098e8bf16f268d64f0b0f4707fe1ea1a1791ba2f3c0c758e5f551863a96c949ad47d7fb40d2', 
		'C665BEFB36DA189D78822D10528CBF3B12B3EEF726039909C1A16A270D48719377966B957A878E720584779A62825C18DA26415E49A7176A894E7510FD1451F5'],
	
];
for (const [source,expect] of hex512Pairs) {
	tsts('Sha512: 0x' + source, () => {
		const h = hex.toBytes(source);
		const hash=new Sha512();
		hash.write(h);
		const md=hash.sum();
		assert.is(hex.fromBytes(md), expect);
	});
}

tsts.run();
