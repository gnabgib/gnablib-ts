import { suite } from 'uvu';
import {Assert} from '../../src/test/assert';
import * as assert from 'uvu/assert';
import * as utf8 from '../../src/encoding/Utf8';
import { Hex } from '../../src/encoding/Hex';
import { Sha3_512} from '../../src/hash/Sha3';

const tsts = suite('SHA3/FIPS-202 (512)');

const ascii512Pairs = [
	[
		'',
		'A69F73CCA23A9AC5C8B567DC185A756E97C982164FE25859E0D1DCC1475C80A615B2123AF1F5F94C11E3E9402C3AC558F500199D95B6D3E301758586281DCD26',
	],
	//https://emn178.github.io/online-tools/sha3_512.html
	[
		'The quick brown fox jumps over the lazy dog',
		'01DEDD5DE4EF14642445BA5F5B97C15E47B9AD931326E4B0727CD94CEFC44FFF23F07BF543139939B49128CAF436DC1BDEE54FCB24023A08D9403F9B4BF0D450',
	],
	[
		'The quick brown fox jumps over the lazy dog.',
		'18F4F4BD419603F95538837003D9D254C26C23765565162247483F65C50303597BC9CE4D289F21D1C2F1F458828E33DC442100331B35E7EB031B5D38BA6460F8',
	],
	[
		'The quick brown fox jumps over the lazy cog',
		'28E361FE8C56E617CAA56C28C7C36E5C13BE552B77081BE82B642F08BB7EF085B9A81910FE98269386B9AACFD2349076C9506126E198F6F6AD44C12017CA77B1',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'9524B9A5536B91069526B4F6196B7E9475B4DA69E01F0C855797F224CD7335DDB286FD99B9B32FFE33B59AD424CC1744F6EB59137F5FB8601932E8A8AF0AE930',
	],
	[
		'gnabgib',
		'4A45943D3AB7D094CAD3AD9D247FFA90C79CC5D5E5D782FC9CB5EDF209072358DAF98F33327C89C07C6F0E166F3FC491AD006336F6E3EDCBF1EB193D46669B92',
	],
];

for (const [source,expect] of ascii512Pairs) {
    const b = utf8.toBytes(source);
    tsts('SHA3-512:' + source, () => {
		const hash=new Sha3_512();
		hash.write(b);
		const md=hash.sum();
		assert.is(Hex.fromBytes(md), expect);
		assert.is(hash.size,64);
		assert.is(hash.blockSize,72);
	});
}

tsts('Sequential Hash & reset: a/ab/b',()=> {
	const hash=new Sha3_512();
	//md(a)
	hash.write(utf8.toBytes('a'));
	Assert.bytesMatchHex(hash.sum(), '697F2D856172CB8309D6B8B97DAC4DE344B549D4DEE61EDFB4962D8698B7FA803F4F93FF24393586E28B5B957AC3D1D369420CE53332712F997BD336D09AB02A');
	//md(ab)
	hash.write(utf8.toBytes('b'));
	Assert.bytesMatchHex(hash.sum(), '01C87B5E8F094D8725ED47BE35430DE40F6AB6BD7C6641A4ECF0D046C55CB468453796BB61724306A5FB3D90FBE3726A970E5630AE6A9CF9F30D2AA062A0175E');
	//md(b)
	hash.reset();
	hash.write(utf8.toBytes('b'));
	Assert.bytesMatchHex(hash.sum(), '8446C46EE03793BA6E5813BA0DB4480008926DD1D19EFE2C8EB92F9034DA974D2171AE483F29CE3A79ED4FDD621AE1ED14FE12532AF95DDD0728779CE5AA842D');
});

tsts.run();
