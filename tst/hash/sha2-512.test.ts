import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import * as utf8 from '../../src/encoding/Utf8';
import { Hex } from '../../src/encoding/Hex';
import {
	Sha512,
	Sha512_224,
	Sha512_256,
} from '../../src/hash/Sha2';

const tsts = suite('SHA2/RFC 6234 | FIPS 180-4 (512)');

const ascii512Pairs = [
	//Source: RFC6234
	//test 1
	[
		'abc', 
		'DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA20A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD454D4423643CE80E2A9AC94FA54CA49F'],
	//test 2
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu', 
		'8E959B75DAE313DA8CF4F72814FC143F8F7779C6EB9F7FA17299AEADB6889018501D289E4900F7E4331B99DEC4B5433AC7D329EEB6DD26545E96E55B874BE909'],
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrst',
		'0988DB6EE79AA0B4B28B0B3D2D9D50A0C2782144BA51A0405BDF82F04E895FB6A4848953A0028D33DD6FCE20C3994D078F8382DFC48903521C7AA744DDEBF6C6'],
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstuv', 
		'3BAC30B4B4933AB8A535CB7B240788A34177AC2F7B76D8D0C8FC154EF9F48D5D5BF880F32C9CE525599D496C6DAA77C3E32F5072A9E41B684E8DDDFB3D816D8D'],
	//test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), //512 bits
		'89D05BA632C699C31231DED4FFC127D5A894DAD412C0E024DB872D1ABD2BA8141A0F85072A9BE1E2AA04CF33C765CB510813A39CD5A84C4ACAA64D3F3FB7BAE9'],
	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'',
		'CF83E1357EEFB8BDF1542850D66D8007D620E4050B5715DC83F4A921D36CE9CE47D0D13C5D85F2B0FF8318D2877EEC2F63B931BD47417A81A538327AF927DA3E',
	],
	//Others https://md5calc.com/hash/sha512/
	[
		'The quick brown fox jumps over the lazy dog',
		'07E547D9586F6A73F73FBAC0435ED76951218FB7D0C8D788A309D785436BBB642E93A252A954F23912547D1E8A3B5ED6E1BFD7097821233FA0538F3DB854FEE6',
	],
	[
		'The quick brown fox jumps over the lazy dog.',
		'91EA1245F20D46AE9A037A989F54F1F790F0A47607EEB8A14D12890CEA77A1BBC6C7ED9CF205E67B7F2B8FD4C7DFD3A7A8617E45F3C463D481C7E586C39AC1ED',
	],
	[
		'The quick brown fox jumps over the lazy cog',
		'3EEEE1D0E11733EF152A6C29503B3AE20C4F1F3CDA4CB26F1BC1A41F91C7FE4AB3BD86494049E201C4BD5155F31ECB7A3C8606843C4CC8DFCAB7DA11C8AE5045',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
		'59034B1D16E36833960DDAA51EDAE7858F462E7D49A4E9F7383BAF1553AF7B21F4E1502362048BA70EA94C975C3B5B005E99775ED099EA4C7349EF21F01AA9CD',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0',
		'50DFF3E8D4A7C4EFD1B5D336412DB781384B42FFE960413A0060334CCD8C93FC04B10D984E31DD3E8AEB791D7EE202927F444B88AA063E5E042CED9266120F1D',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01',
		'7C6E8AE9985EC6123F95CAC60DC630729C70472DE027C3634246527798BBF1C2BFD7BFA91BC082CD04A758A8A192A88A63E3E633A21E9A82D6AB0130E0D9A8E9',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012',
		'3037112031AEBDE97B47CF86A08FD53C7273010B35A13DA3C6321A7A3567AD0D6985B74CD6F94A89A1800DB203C91DA0AE8B0D12D6AB335E7F2F00723AB112A5',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123',
		'1FA0ABEBA710B6A54FFFC6D9FEFB0E64CC7D105170C840A732D2886DB173F38CC7D6EC40D1CC064A90794D9E8DB9D5A2D37829BE9A0D7EFF8550FC62ADECB2F0',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234',
		'BDB3E36C98BD645E70427A4001F8EC910F6CA63235C25202FED3F5B9BABCA1980231CE2FEBF4A38A2029425C23E196D2B2AF9438B4FDFC573F297AB3EDEF9139',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345',
		'7772E7E534F2C8C24919329B55FC1F85DDE970C2D8EB857A12061FDD2C73BA5A4D842C6930DC893563D6128101A4BD27A224D5A054945340DFF107947093E0BA',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456',
		'B5D6E32452CFA02A8690F18E1C5243FE3C6378D8CA3EE3245DC755B51D8C6904F2C50EB1B3416AF897D7752BD4B9C800CE3CFC470DFD96A38EB007A429309DD4',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567',
		'69403723418415475A4B2FD077D628A252038016BE7902AD6C2CE11BB0C6CEA5BFD343BA5486F532DF03835DB68DB95E6AF4CB4D1BA914E699F68CC122891B84',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678',
		'E170A07451A013E066C96DF6110AE81E4B647B5AD0A71F904E4D94C817EC2AAC8E7EB946979DC95056B4807119C12D5D2E22081E33FAFC288A6E0FF1166E32BC',
	],
	[
		'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
		'1E07BE23C26A86EA37EA810C8EC7809352515A970E9253C26F536CFC7A9996C45C8370583E0A78FA4A90041D71A4CEAB7423F19C71B9D5A3E01249F0BEBD5894',
	],
	[
		'12345678901234567890123456789012345678901234567890123456789012345678901234567890',
		'72EC1EF1124A45B047E8B7C75A932195135BB61DE24EC0D1914042246E0AEC3A2354E093D76F3048B456764346900CB130D2A4FD5DD16ABB5E30BCB850DEE843',
	],
	[
		'gnabgib',
		'5B58B7C85B03D1F9AA15D0972EEE02C632214CCF5622B8DB7D940EC30E17DCA053EA11468DB229A82907F216BE33D3C041CA616622FB5AABCBB05D4008CC889C',
	],
];
for (const [source,expect] of ascii512Pairs) {
	const b = utf8.toBytes(source);
	tsts('Sha512:' + source, () => {
		const hash=new Sha512();
		hash.write(b);
		const md=hash.sum();
		assert.is(Hex.fromBytes(md), expect);
	});
}

const hex512Pairs=[
	//test 6
	[
		'D0', 
		'9992202938E882E73E20F6B69E68A0A7149090423D93C81BAB3F21678D4ACEEEE50E4E8CAFADA4C85A54EA8306826C4AD6E74CECE9631BFA8A549B4AB3FBBA15'],
	//Test 8
	[
		'8d4e3c0e3889191491816e9d98bff0a0',
		'CB0B67A4B8712CD73C9AABC0B199E9269B20844AFB75ACBDD1C153C9828924C3DDEDAAFE669C5FDD0BC66F630F6773988213EB1B16F517AD0DE4B2F0C95C90F8'
	],
	//test 10
	[
		'a55f20c411aad132807a502d65824e31a2305432aa3d06d3e282a8d84e0de1de6974bf495469fc7f338f8054d58c26c49360c3e87af56523acf6d89d03e56ff2f868002bc3e431edc44df2f0223d4bb3b243586e1a7d924936694fcbbaf88d9519e4eb50a644f8e4f95eb0ea95bc4465c8821aacd2fe15ab4981164bbb6dc32f969087a145b0d9cc9c67c22b763299419cc4128be9a077b3ace634064e6d99283513dc06e7515d0d73132e9a0dc6d3b1f8b246f1a98a3fc72941b1e3bb2098e8bf16f268d64f0b0f4707fe1ea1a1791ba2f3c0c758e5f551863a96c949ad47d7fb40d2', 
		'C665BEFB36DA189D78822D10528CBF3B12B3EEF726039909C1A16A270D48719377966B957A878E720584779A62825C18DA26415E49A7176A894E7510FD1451F5'],
	
];
for (const [source,expect] of hex512Pairs) {
	tsts('Sha512: 0x' + source, () => {
		const h = Hex.toBytes(source);
		const hash=new Sha512();
		hash.write(h);
		const md=hash.sum();
		assert.is(Hex.fromBytes(md), expect);
	});
}

const ascii512_224Pairs = [
	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'',
		'6ED0DD02806FA89E25DE060C19D3AC86CABB87D6A0DDD05C333B84F4'],
    //(Like because RFC 6234 doesn't include /224|256)
	//like test 1
	[
		'abc', 
		'4634270F707B6A54DAAE7530460842E20E37ED265CEEE9A43E8924AA'],
	//like test 2
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu', 
		'23FEC5BB94D60B23308192640B0C453335D664734FE40E7268674AF9'],
	//like test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), //512 bits
		'406338C163AD81F50D6B4C9BB45240C5D706B498863404BAB6B84938'],

	//Others: echo -n gnabgib | shasum -a 512224 -
	[
		'gnabgib', 
		'63C7E6AE3EB9365315BF7D8E41F3B1737597962C66B3A29143394299'],
];
for (const [source,expect] of ascii512_224Pairs) {
	const b = utf8.toBytes(source);
	tsts('Sha512/224: ' + source, () => {
		const hash=new Sha512_224();
		hash.write(b);
		const md=hash.sum();
		assert.is(Hex.fromBytes(md), expect);
	});
}

const ascii512_256 = [
	//Source: https://en.wikipedia.org/wiki/SHA-2
	[
		'',
		'C672B8D1EF56ED28AB87C3622C5114069BDD3AD7B8F9737498D0C01ECEF0967A'],
    //(Like because RFC 6234 doesn't include /224|256)
    //like test 1
	[
		'abc', 
		'53048E2681941EF99B2E29B76B4C7DABE4C2D0C634FC6D46E0E2F13107E7AF23'],
	//like test 2
	[
		'abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu', 
		'3928E184FB8690F840DA3988121D31BE65CB9D3EF83EE6146FEAC861E19B563A'],
	//like test 4
	[
		'0123456701234567012345670123456701234567012345670123456701234567'.repeat(10), //512 bits
		'CF78E4BA935B4D9EB91052AEDDF8E2D606C590F708573693EA94BE826A666EE4'],
	//Others: echo -n gnabgib | shasum -a 512256 -
	[
		'gnabgib',
		'FDED532E1BA8CF9F02F2F2A47B1E61275ED2818A2FAD8818AFD3114A01849D5B',
	],
];
for (const [source,expect] of ascii512_256) {
	const b = utf8.toBytes(source);
	tsts('Sha512/256: ' + source, () => {
		const hash=new Sha512_256();
		hash.write(b);
		const md=hash.sum();
		assert.is(Hex.fromBytes(md), expect);
	});
}

tsts.run();