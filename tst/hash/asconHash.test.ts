import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { hex } from '../../src/encoding/Hex';
import { AsconHash } from '../../src/hash/Ascon';
import { IKat } from './IKat';


const tsts = suite('Ascon-Hash');

const katTests:IKat[]= [
    {
        descr:'LWC_HASH_KAT_256 1',
        msg:'',
        md:'7346BC14F036E87AE03D0997913088F5F68411434B3CF8B54FA796A80D251F91'
    },
    {
        descr:'LWC_HASH_KAT_256 2',
        msg:'00',
        md:'8DD446ADA58A7740ECF56EB638EF775F7D5C0FD5F0C2BBBDFDEC29609D3C43A2'
    },
    {
        descr:'LWC_HASH_KAT_256 3',
        msg:'0001',
        md:'F77CA13BF89146D3254F1CFB7EDDBA8FA1BF162284BB29E7F645545CF9E08424'
    },
    {
        descr:'LWC_HASH_KAT_256 17',
        msg:'000102030405060708090A0B0C0D0E0F',
        md:'D4E56C4841E2A0069D4F07E61B2DCA94FD6D3F9C0DF78393E6E8292921BC841D'
    },
    {
        descr:'LWC_HASH_KAT_256 18',
        msg:'000102030405060708090A0B0C0D0E0F10',
        md:'91407CF08BC734CA4CAD88D6A848BF87045F56EE2DF51563B9BA59D66B489938'
    },
    {
        descr:'LWC_HASH_KAT_256 34',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20',
        md:'A6DF1844412BAD536A98DB01024C73A8780BE1A7099375696D37430586BA9381'
    },
    {
        descr:'LWC_HASH_KAT_256 35',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021',
        md:'60FF8A72D573A2165E03983842F477270EDF13B6263094C43FDEBDBAA94D9A21'
    },
    {
        descr:'LWC_HASH_KAT_256 67',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041',
        md:'C232E385C423B6E4B7D2179DCB7B2D08643DEC8AF82A855C6A5C6762A3AF958D'
    },
    {
        descr:'LWC_HASH_KAT_256 68',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142',
        md:'C0D415688358423B45804DD00311B1B4785F9C30C5882DB175C56ECEACA6EA41'
    },
    {
        descr:'LWC_HASH_KAT_256 174',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC',
        md:'BBEA67553A4C5937D2A8F2AE7F7EFE4B324C79470E747232939799B56EFC3366'
    },
    {
        descr:'LWC_HASH_KAT_256 600',
        msg:'000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556',
        md:'60F3BC45AF02F4BC1AD5C666854D91DA677DA68072015B0439D79556CD34D5D2'
    },
    {
        descr:'LWC_HASH_KAT_256 1000',
        msg
        md:'99D2319894B26F1792AAD7552359DF80C73F51361962A67F6BDA3B037952F79D'
    },
];
for (const {descr,msg,md} of katTests) {
	const b = hex.toBytes(msg);
	tsts('hash ' + descr, () => {
		const hash=new AsconHash();
		hash.write(b);
		const foundMd=hash.sum();
		assert.is(hex.fromBytes(foundMd), md);
	});
}

tsts(`reset`,()=>{
	const hash=new AsconHash();
    hash.write(hex.toBytes('000102030405060708090A0B0C0D0E0F'));
    assert.equal(hex.fromBytes(hash.sum()),'D4E56C4841E2A0069D4F07E61B2DCA94FD6D3F9C0DF78393E6E8292921BC841D');
    hash.reset();
    assert.equal(hex.fromBytes(hash.sum()),'7346BC14F036E87AE03D0997913088F5F68411434B3CF8B54FA796A80D251F91');
});

tsts(`newEmpty`,()=>{
	const hash=new AsconHash();
    hash.write(hex.toBytes('000102030405060708090A0B0C0D0E0F'));
    assert.equal(hex.fromBytes(hash.sum()),'D4E56C4841E2A0069D4F07E61B2DCA94FD6D3F9C0DF78393E6E8292921BC841D');
    const hash2=hash.newEmpty();
    hash2.write(hex.toBytes('000102030405060708090A0B0C0D0E0F'));
    assert.equal(hex.fromBytes(hash2.sum()),'D4E56C4841E2A0069D4F07E61B2DCA94FD6D3F9C0DF78393E6E8292921BC841D');
});

tsts.run();
