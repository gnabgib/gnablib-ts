import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import { Mt19937 } from '../../src/prng/mersenneTwister';

const tsts = suite('Mt19937');
//todo: find a testing source
const seq_def: number[] = [
	2325592414, 482149846, 4177211283, 3872387439, 1663027210, 
    2005191859, 666881213, 3289399202, 2514534568, 3882134983, 
    4129444750, 1642354536, 1534745662, 4071148575, 198677157, 
    743002443, 2133457855, 3498546871, 1282847148, 1855778934, 
    1746794402, 113539287, 2305954126, 1040181529, 2216204121, 
    2998363345, 3336770373, 1404944261, 817116335, 35608857,
	1460061465, 1820744284, 603529561, 1422465967, 1556312033, 
    766816387, 3357131723, 3490573827, 3235337964, 52407870, 
    1042471362, 3130565075, 2460558883, 939232996, 521766120, 
    2478207168, 4001831944, 2263897511, 3096833816, 297374608, 
    3536935794, 1930675369, 2991905288, 4055852935, 522109632, 
    3015713274, 4018234485, 3762736293, 3247666852, 3617420760,
    1809297248, 149536815, 3963470893, 3313530457, 895192011, 
    45775350, 4082603668, 2409209729, 521535020, 3404504820, 
    1234839900, 3475124443, 1588942415, 2438320887, 2043679553, 
    2402567319, 3202526626, 2428451331, 865105578, 338918227, 
    606286106, 1448841315, 2786591146, 3655102783, 1292226391, 
    3168715200, 1705186977, 2448402743, 4025613341, 949089373,
    2858817280, 4282645144, 1073860359, 1047981410, 3495718151, 
    3139321035, 1901922952, 2975170819, 3676352554, 3197530790,
];
const rng_def=Mt19937.new();
let i = 0;
for (const expect of seq_def) {
	const act = rng_def.rawNext();
	tsts(`Mt19937().rawNext[${i}]`, () => {
		assert.equal(act, expect);
	});
	i++;
}

for(;i<999;i++) rng_def.rawNext();
tsts(`Mt19937().rawNext(1000)`, () => {
    assert.equal(rng_def.rawNext(), 1746987133);
});

//https://oeis.org/A221557/b221557.txt
const seq_5489: number[] = [
    3499211612, 581869302, 3890346734, 3586334585, 545404204, 
    4161255391, 3922919429, 949333985, 2715962298, 1323567403, 
    418932835, 2350294565, 1196140740, 809094426, 2348838239, 
    4264392720, 4112460519, 4279768804, 4144164697, 4156218106, 
    676943009, 3117454609, 4168664243, 4213834039, 4111000746, 
    471852626, 2084672536, 3427838553, 3437178460, 1275731771,
    609397212, 20544909, 1811450929, 483031418, 3933054126, 
    2747762695, 3402504553, 3772830893, 4120988587, 2163214728, 
    2816384844, 3427077306, 153380495, 1551745920, 3646982597, 
    910208076, 4011470445, 2926416934, 2915145307, 1712568902, 
    3254469058, 3181055693, 3191729660, 2039073006, 1684602222, 
    1812852786, 2815256116, 746745227, 735241234, 1296707006,
    3032444839, 3424291161, 136721026, 1359573808, 1189375152, 
    3747053250, 198304612, 640439652, 417177801, 4269491673, 
    3536724425, 3530047642, 2984266209, 537655879, 1361931891, 
    3280281326, 4081172609, 2107063880, 147944788, 2850164008, 
    1884392678, 540721923, 1638781099, 902841100, 3287869586, 
    219972873, 3415357582, 156513983, 802611720, 1755486969,
    2103522059, 1967048444, 1913778154, 2094092595, 2775893247, 
    3410096536, 3046698742, 3955127111, 3241354600, 3468319344,
];
const rng_5489=Mt19937.seed(5489);
i = 0;
for (const expect of seq_5489) {
	const act = rng_5489.rawNext();
	tsts(`Mt19937(5489).rawNext[${i}]`, () => {
		assert.equal(act, expect);
	});
	i++;
}

for(;i<999;i++) rng_5489.rawNext();
tsts(`Mt19937(5489).rawNext(1000)`, () => {
    assert.equal(rng_5489.rawNext(), 1341017984);
});

tsts(`Mt19937(,false) save returns empty, restore throws`,()=>{
    const r=Mt19937.new();
    const sav=r.save();
    assert.equal(sav.length,0);
    assert.throws(()=>Mt19937.restore(sav));
})

tsts(`Mt19937().save/restore loop`,()=>{
    const r=Mt19937.new(true);
    assert.equal(r.rawNext(),seq_def[0],'r consume[0]');
    const sav=r.save();
    assert.equal(sav.length,2498,'save length');
    assert.equal(r.rawNext(),seq_def[1],'r consume[1]');
    assert.equal(r.rawNext(),seq_def[2],'r consume[2]');

    const r2=Mt19937.restore(sav);    
    assert.equal(r2.rawNext(),seq_def[1],'r2 still at [1]');
    assert.equal(r.rawNext(),seq_def[3],'r consume[3]');

    assert.is(Object.prototype.toString.call(r).indexOf("mt19937")>0,true,'toString is set');
});


tsts.run();
