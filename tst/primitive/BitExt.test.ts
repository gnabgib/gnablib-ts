import { suite } from 'uvu';
import * as assert from 'uvu/assert';
import * as bitExt from '../../src/primitive/BitExt';

const tsts = suite('BitExt');

const countOnes = [
	[0, 0],
	[1, 1],
	[2, 1],
	[3, 2],
	[4, 1],
	[5, 2],
	[6, 2],
	[7, 3],
	[0xf, 4],
	[0xff, 8],
	[0xfff, 12],
	[0xffff, 16],
	[1 << 16, 1],
];
for (const pairs of countOnes) {
	tsts('Count 1s in:' + pairs[0], () => {
		assert.is(bitExt.count1Bits(pairs[0]), pairs[1]);
	});
}

const buildLsb = [
	[0, 0],
	[1, 1],
	[2, 3],
	[3, 7],
	[4, 0xf],
	[5, 0x1f],
	[6, 0x3f],
	[7, 0x7f],
	[8, 0xff],
	[16, 0xffff],
	[32, 0xffffffff],
];
for (const pairs of buildLsb) {
	tsts('Build LSB of size:' + pairs[0], () => {
		assert.is(bitExt.lsbs(pairs[0]), pairs[1]);
	});
}

const rot32 = [
	//Start, left, end
	[0, 0, 0],
	[0, 1, 0],
	[0, 4, 0],
	[0, 7, 0],
	[0, 15, 0],
	[0, 31, 0],
	[0, 32, 0],

	[1, 0, 1],
	[1, 1, 2],
	[1, 4, 0x10],
	[1, 7, 0x80],
	[1, 15, 0x8000],
	[1, 31, 0x80000000],
	[1, 32, 1],

	[2, 0, 2],
	[2, 1, 4],
	[2, 4, 0x20],
	[2, 7, 0x100],
	[2, 15, 0x10000],
	[2, 31, 1],
	[2, 32, 2],

	[4, 0, 4],
	[4, 1, 0x8],
	[4, 4, 0x40],
	[4, 7, 0x200],
	[4, 15, 0x20000],
	[4, 31, 2],
	[4, 32, 4],

	[8, 0, 8],
	[8, 1, 0x10],
	[8, 4, 0x80],
	[8, 7, 0x400],
	[8, 15, 0x40000],
	[8, 31, 4],
	[8, 32, 8],

	[0x80, 0, 0x80],
	[0x80, 1, 0x100],
	[0x80, 4, 0x800],
	[0x80, 7, 0x4000],
	[0x80, 15, 0x400000],
	[0x80, 31, 0x40],
	[0x80, 32, 0x80],

	[0x800, 0, 0x800],
	[0x800, 1, 0x1000],
	[0x800, 4, 0x8000],
	[0x800, 7, 0x40000],
	[0x800, 15, 0x4000000],
	[0x800, 31, 0x400],
	[0x800, 32, 0x800],

	[0x8000, 0, 0x8000],
	[0x8000, 1, 0x10000],
	[0x8000, 4, 0x80000],
	[0x8000, 7, 0x400000],
	[0x8000, 15, 0x40000000],
	[0x8000, 31, 0x4000],
	[0x8000, 32, 0x8000],

	[0x80000, 0, 0x80000],
	[0x80000, 1, 0x100000],
	[0x80000, 4, 0x800000],
	[0x80000, 7, 0x4000000],
	[0x80000, 15, 4],
	[0x80000, 31, 0x40000],
	[0x80000, 32, 0x80000],

	[0x800000, 0, 0x800000],
	[0x800000, 1, 0x1000000],
	[0x800000, 4, 0x8000000],
	[0x800000, 7, 0x40000000],
	[0x800000, 15, 0x40],
	[0x800000, 31, 0x400000],
	[0x800000, 32, 0x800000],

	[0x8000000, 0, 0x8000000],
	[0x8000000, 1, 0x10000000],
	[0x8000000, 4, 0x80000000],
	[0x8000000, 7, 0x4],
	[0x8000000, 15, 0x400],
	[0x8000000, 31, 0x4000000],
	[0x8000000, 32, 0x8000000],

	[0x10000000, 0, 0x10000000],
	[0x10000000, 1, 0x20000000],
	[0x10000000, 4, 1],
	[0x10000000, 7, 8],
	[0x10000000, 15, 0x800],
	[0x10000000, 31, 0x8000000],
	[0x10000000, 32, 0x10000000],

	[0x20000000, 0, 0x20000000],
	[0x20000000, 1, 0x40000000],
	[0x20000000, 4, 2],
	[0x20000000, 7, 0x10],
	[0x20000000, 15, 0x1000],
	[0x20000000, 31, 0x10000000],
	[0x20000000, 32, 0x20000000],

	[0x40000000, 0, 0x40000000],
	[0x40000000, 1, 0x80000000],
	[0x40000000, 4, 4],
	[0x40000000, 7, 0x20],
	[0x40000000, 15, 0x2000],
	[0x40000000, 31, 0x20000000],
	[0x40000000, 32, 0x40000000],

	[0x80000000, 0, 0x80000000],
	[0x80000000, 1, 1],
	[0x80000000, 4, 8],
	[0x80000000, 7, 0x40],
	[0x80000000, 15, 0x4000],
	[0x80000000, 31, 0x40000000],
	[0x80000000, 32, 0x80000000],

	//1010=a, 0101=5, odd shift=switch, even shift=other
	[0xaaaaaaaa, 0, 0xaaaaaaaa],
	[0xaaaaaaaa, 1, 0x55555555],
	[0xaaaaaaaa, 4, 0xaaaaaaaa],
	[0xaaaaaaaa, 7, 0x55555555],
	[0xaaaaaaaa, 15, 0x55555555],
	[0xaaaaaaaa, 31, 0x55555555],
	[0xaaaaaaaa, 32, 0xaaaaaaaa],

	//1000=8 move 1 0001, move 2 0010 move 3 0100, move 4=1000
	[0x88888888, 0, 0x88888888],
	[0x88888888, 1, 0x11111111],
	[0x88888888, 4, 0x88888888],
	[0x88888888, 7, 0x44444444],
	[0x88888888, 15, 0x44444444],
	[0x88888888, 31, 0x44444444],
	[0x88888888, 32, 0x88888888],

	//=0100 1001 0010 0100 1001 0010 0100 1001
	[0x49249249, 0, 0x49249249],
	[0x49249249, 1, 0x92492492],
	[0x49249249, 4, 0x92492494],
	[0x49249249, 7, 0x924924a4],
	[0x49249249, 15, 0x4924a492],
	[0x49249249, 31, 0xa4924924],
	[0x49249249, 32, 0x49249249],

	[0x01234567, 0, 0x01234567],
	[0x01234567, 1, 0x02468ace],
	[0x01234567, 4, 0x12345670],
	[0x01234567, 7, 0x91a2b380],
	[0x01234567, 15, 0xa2b38091],
	[0x01234567, 31, 0x8091a2b3],
	[0x01234567, 32, 0x01234567],

	[0x0a442081, 0, 0x0a442081],
	[0x0a442081, 1, 0x14884102],
	[0x0a442081, 4, 0xa4420810],
	[0x0a442081, 7, 0x22104085],
	[0x0a442081, 15, 0x10408522],
	[0x0a442081, 31, 0x85221040],
	[0x0a442081, 32, 0xa442081],

	[0x0103070f, 0, 0x0103070f],
	[0x0103070f, 1, 0x02060e1e],
	[0x0103070f, 4, 0x103070f0],
	[0x0103070f, 7, 0x81838780],
	[0x0103070f, 15, 0x83878081],
	[0x0103070f, 31, 0x80818387],
	[0x0103070f, 32, 0x0103070f],
];

for (const pairs of rot32) {
	const left = bitExt.rotLeft32(pairs[0], pairs[1]) >>> 0;
	tsts('RotLeft32:' + pairs[0] + '<<<' + pairs[1], () => {
		assert.is(left, pairs[2]);
	});

	tsts('RotRight32:' + left + '>>>' + pairs[1], () => {
		assert.is(bitExt.rotRight32(left, pairs[1]) >>> 0, pairs[0]);
	});
}

const rot16 = [
	[0, 0, 0],
	[0, 1, 0],
	[0, 4, 0],
	[0, 7, 0],
	[0, 15, 0],
	[0, 16, 0],

	[1, 0, 1],
	[1, 1, 2],
	[1, 2, 4],
	[1, 3, 8],
	[1, 4, 0x10],
	[1, 5, 0x20],
	[1, 6, 0x40],
	[1, 7, 0x80],
	[1, 8, 0x100],
	[1, 9, 0x200],
	[1, 10, 0x400],
	[1, 11, 0x800],
	[1, 12, 0x1000],
	[1, 13, 0x2000],
	[1, 14, 0x4000],
	[1, 15, 0x8000],
	[1, 16, 1],

	[2, 0, 2],
	[2, 1, 4],
	[2, 4, 0x20],
	[2, 7, 0x100],
	[2, 15, 1],
	[2, 16, 2],

	[4, 0, 4],
	[4, 1, 0x8],
	[4, 4, 0x40],
	[4, 7, 0x200],
	[4, 15, 2],
	[4, 16, 4],

	[8, 0, 8],
	[8, 1, 0x10],
	[8, 4, 0x80],
	[8, 7, 0x400],
	[8, 15, 4],
	[8, 16, 8],

	[0x80, 0, 0x80],
	[0x80, 1, 0x100],
	[0x80, 4, 0x800],
	[0x80, 7, 0x4000],
	[0x80, 15, 0x40],
	[0x80, 16, 0x80],

	[0x800, 0, 0x800],
	[0x800, 1, 0x1000],
	[0x800, 4, 0x8000],
	[0x800, 7, 0x4],
	[0x800, 15, 0x400],
	[0x800, 16, 0x800],

	[0x8000, 0, 0x8000],
	[0x8000, 1, 1],
	[0x8000, 4, 8],
	[0x8000, 7, 0x40],
	[0x8000, 15, 0x4000],
	[0x8000, 16, 0x8000],
];

for (const pairs of rot16) {
	const left = bitExt.rotLeft16(pairs[0], pairs[1]) >>> 0;
	tsts('RotLeft16:' + pairs[0] + '<<<' + pairs[1], () => {
		assert.is(left, pairs[2]);
	});

	tsts('RotRight32:' + left + '>>>' + pairs[1], () => {
		assert.is(bitExt.rotRight16(left, pairs[1]) >>> 0, pairs[0]);
	});
}

tsts.run();
